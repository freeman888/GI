<code minversion="2007">
  <lib name="FreeStudio">
    <get value="IO" />
    <get value="Control" />
    <get value="Page" />
    <get value="List" />
    <get value="File" />
    <get value="String" />
    <get value="System" />
    <get value="Math" />
    <deffun funname="Main" params="args" isref="False">
      <var_s varname="mp" str="var mp = MainPage(&quot;FreeStudio&quot;);" />
      <getres_s str="var mp = MainPage(&quot;FreeStudio&quot;);">
        <arg value="mp" con="var" />
        <arg con="fun">
          <fun>
            <arg value="MainPage" con="var" />
          </fun>
          <params>
            <arg value="FreeStudio" con="str" />
          </params>
        </arg>
      </getres_s>
      <usefun_s str="PageLoad(mp);">
        <arg con="fun">
          <fun>
            <arg value="PageLoad" con="var" />
          </fun>
          <params>
            <arg value="mp" con="var" />
          </params>
        </arg>
      </usefun_s>
    </deffun>
    <cls name="MainPage" parent="Page">
      <member value="gf1" />
      <memfun funname="init" params="title" isref="False" isstatic="False">
        <var_s varname="tip_title" str="var tip_title = Tip(&quot;title&quot;);" />
        <getres_s str="var tip_title = Tip(&quot;title&quot;);">
          <arg value="tip_title" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="title" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip_title:Text = &quot;FreeStudio&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip_title" con="var" />
          </arg>
          <arg value="FreeStudio" con="str" />
        </getres_s>
        <getres_s str="tip_title:FontSize = 60;">
          <arg value="FontSize" con="mem">
            <arg value="tip_title" con="var" />
          </arg>
          <arg value="60" con="num" />
        </getres_s>
        <getres_s str="tip_title:Horizontal = &quot;center&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="tip_title" con="var" />
          </arg>
          <arg value="center" con="str" />
        </getres_s>
        <getres_s str="tip_title:Vertical = &quot;center&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="tip_title" con="var" />
          </arg>
          <arg value="center" con="str" />
        </getres_s>
        <getres_s str="tip_title:Margin = List(0,0,0,450);">
          <arg value="Margin" con="mem">
            <arg value="tip_title" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="0" con="num" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
              <arg value="450" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip_title:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip_title" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <var_s varname="bu_1" str="var bu_1 = Bubble(&quot;bu_1&quot;);" />
        <getres_s str="var bu_1 = Bubble(&quot;bu_1&quot;);">
          <arg value="bu_1" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bu_1" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_1:Text = &quot;创建一个项目&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_1" con="var" />
          </arg>
          <arg value="创建一个项目" con="str" />
        </getres_s>
        <getres_s str="bu_1:FontSize = 30;">
          <arg value="FontSize" con="mem">
            <arg value="bu_1" con="var" />
          </arg>
          <arg value="30" con="num" />
        </getres_s>
        <getres_s str="bu_1:Height = 60;">
          <arg value="Height" con="mem">
            <arg value="bu_1" con="var" />
          </arg>
          <arg value="60" con="num" />
        </getres_s>
        <getres_s str="bu_1:Width = 220;">
          <arg value="Width" con="mem">
            <arg value="bu_1" con="var" />
          </arg>
          <arg value="220" con="num" />
        </getres_s>
        <getres_s str="bu_1:Margin = List(0,0,0,230);">
          <arg value="Margin" con="mem">
            <arg value="bu_1" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="0" con="num" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
              <arg value="230" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_1:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_1" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_1:Clickevent = this:Creat_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_1" con="var" />
          </arg>
          <arg value="Creat_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <var_s varname="bu_2" str="var bu_2 = Bubble(&quot;bu_2&quot;);" />
        <getres_s str="var bu_2 = Bubble(&quot;bu_2&quot;);">
          <arg value="bu_2" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bu_2" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_2:Text = &quot;打开一个项目&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_2" con="var" />
          </arg>
          <arg value="打开一个项目" con="str" />
        </getres_s>
        <getres_s str="bu_2:FontSize = 30;">
          <arg value="FontSize" con="mem">
            <arg value="bu_2" con="var" />
          </arg>
          <arg value="30" con="num" />
        </getres_s>
        <getres_s str="bu_2:Height = 60;">
          <arg value="Height" con="mem">
            <arg value="bu_2" con="var" />
          </arg>
          <arg value="60" con="num" />
        </getres_s>
        <getres_s str="bu_2:Width = 220;">
          <arg value="Width" con="mem">
            <arg value="bu_2" con="var" />
          </arg>
          <arg value="220" con="num" />
        </getres_s>
        <getres_s str="bu_2:Margin = List(0,0,0,110);">
          <arg value="Margin" con="mem">
            <arg value="bu_2" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="0" con="num" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
              <arg value="110" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_2:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_2" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_2:Clickevent = this:Open_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_2" con="var" />
          </arg>
          <arg value="Open_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <var_s varname="bu_3" str="var bu_3 = Bubble(&quot;bu_3&quot;);" />
        <getres_s str="var bu_3 = Bubble(&quot;bu_3&quot;);">
          <arg value="bu_3" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bu_3" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_3:Text = &quot;帮助&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_3" con="var" />
          </arg>
          <arg value="帮助" con="str" />
        </getres_s>
        <getres_s str="bu_3:FontSize = 30;">
          <arg value="FontSize" con="mem">
            <arg value="bu_3" con="var" />
          </arg>
          <arg value="30" con="num" />
        </getres_s>
        <getres_s str="bu_3:Height = 60;">
          <arg value="Height" con="mem">
            <arg value="bu_3" con="var" />
          </arg>
          <arg value="60" con="num" />
        </getres_s>
        <getres_s str="bu_3:Width = 220;">
          <arg value="Width" con="mem">
            <arg value="bu_3" con="var" />
          </arg>
          <arg value="220" con="num" />
        </getres_s>
        <getres_s str="bu_3:Margin = List(0,10,0,0);">
          <arg value="Margin" con="mem">
            <arg value="bu_3" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="0" con="num" />
              <arg value="10" con="num" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_3:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_3" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <var_s varname="bu_4" str="var bu_4 = Bubble(&quot;bu_4&quot;);" />
        <getres_s str="var bu_4 = Bubble(&quot;bu_4&quot;);">
          <arg value="bu_4" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bu_4" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_4:Text = &quot;设置&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_4" con="var" />
          </arg>
          <arg value="设置" con="str" />
        </getres_s>
        <getres_s str="bu_4:FontSize = 30;">
          <arg value="FontSize" con="mem">
            <arg value="bu_4" con="var" />
          </arg>
          <arg value="30" con="num" />
        </getres_s>
        <getres_s str="bu_4:Height = 60;">
          <arg value="Height" con="mem">
            <arg value="bu_4" con="var" />
          </arg>
          <arg value="60" con="num" />
        </getres_s>
        <getres_s str="bu_4:Width = 220;">
          <arg value="Width" con="mem">
            <arg value="bu_4" con="var" />
          </arg>
          <arg value="220" con="num" />
        </getres_s>
        <getres_s str="bu_4:Margin = List(0,130,0,0);">
          <arg value="Margin" con="mem">
            <arg value="bu_4" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="0" con="num" />
              <arg value="130" con="num" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_4:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_4" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="this:gf1 = GridFlat(&quot;gf1&quot;);">
          <arg value="gf1" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="gf1" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:gf1:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="gf1" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <usefun_s str="this:gf1:Add(tip_title,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="gf1" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="tip_title" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:gf1:Add(bu_1,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="gf1" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="bu_1" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:gf1:Add(bu_2,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="gf1" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="bu_2" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:gf1:Add(bu_3,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="gf1" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="bu_3" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:gf1:Add(bu_4,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="gf1" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="bu_4" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:SetContent(this:gf1);">
          <arg con="fun">
            <fun>
              <arg value="SetContent" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="gf1" con="mem">
                <arg value="this" con="var" />
              </arg>
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="Creat_Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="creatpage" str="var creatpage = CreatPage(&quot;项目创建向导&quot;);" />
        <getres_s str="var creatpage = CreatPage(&quot;项目创建向导&quot;);">
          <arg value="creatpage" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatPage" con="var" />
            </fun>
            <params>
              <arg value="项目创建向导" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="PageGo(creatpage);">
          <arg con="fun">
            <fun>
              <arg value="PageGo" con="var" />
            </fun>
            <params>
              <arg value="creatpage" con="var" />
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="Open_Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="fp" str="var fp = FilePicker();" />
        <getres_s str="var fp = FilePicker();">
          <arg value="fp" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FilePicker" con="var" />
            </fun>
            <params />
          </arg>
        </getres_s>
        <getres_s str="fp:FileType = &quot;gasoline项目文件|*.gca&quot;;">
          <arg value="FileType" con="mem">
            <arg value="fp" con="var" />
          </arg>
          <arg value="gasoline项目文件|*.gca" con="str" />
        </getres_s>
        <usefun_s str="fp:Show();">
          <arg con="fun">
            <fun>
              <arg value="Show" con="mem">
                <arg value="fp" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <if_s str="if(fp:Picked):">
          <then>
            <express>
              <arg value="Picked" con="mem">
                <arg value="fp" con="var" />
              </arg>
            </express>
            <run>
              <var_s varname="xml" str="var xml = XmlDocument();" />
              <getres_s str="var xml = XmlDocument();">
                <arg value="xml" con="var" />
                <arg con="fun">
                  <fun>
                    <arg value="XmlDocument" con="var" />
                  </fun>
                  <params />
                </arg>
              </getres_s>
              <usefun_s str="xml:Load(fp:Stream);">
                <arg con="fun">
                  <fun>
                    <arg value="Load" con="mem">
                      <arg value="xml" con="var" />
                    </arg>
                  </fun>
                  <params>
                    <arg value="Stream" con="mem">
                      <arg value="fp" con="var" />
                    </arg>
                  </params>
                </arg>
              </usefun_s>
              <usefun_s str="LoadEditor(xml,fp:FileName);">
                <arg con="fun">
                  <fun>
                    <arg value="LoadEditor" con="var" />
                  </fun>
                  <params>
                    <arg value="xml" con="var" />
                    <arg value="FileName" con="mem">
                      <arg value="fp" con="var" />
                    </arg>
                  </params>
                </arg>
              </usefun_s>
            </run>
          </then>
        </if_s>
      </memfun>
    </cls>
  </lib>
  <lib name="FreeStudio">
    <get value="Xml" />
    <cls name="CreatPage" parent="Page">
      <member value="cet1" />
      <member value="cet2" />
      <member value="cet3" />
      <member value="cet4" />
      <member value="cet5" />
      <member value="cet6" />
      <member value="cswitcher" />
      <memfun funname="init" params="title" isref="False" isstatic="False">
        <var_s varname="mgf" str="var mgf = GridFlat(&quot;gf1&quot;);" />
        <getres_s str="var mgf = GridFlat(&quot;gf1&quot;);">
          <arg value="mgf" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="gf1" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="mgf:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="mgf" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <usefun_s str="mgf:AddRow(1,&quot;rate&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddRow" con="mem">
                <arg value="mgf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="rate" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="mgf:AddRow(100,&quot;value&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddRow" con="mem">
                <arg value="mgf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="100" con="num" />
              <arg value="value" con="str" />
            </params>
          </arg>
        </usefun_s>
        <getres_s str="mgf:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="mgf" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="mgf:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="mgf" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <var_s varname="msf" str="var msf = StackFlat(&quot;msf&quot;);" />
        <getres_s str="var msf = StackFlat(&quot;msf&quot;);">
          <arg value="msf" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="msf" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="msf:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="msf" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="msf:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="msf" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="msf:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="msf" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="sf1" str="var sf1 = StackFlat(&quot;sf1&quot;);" />
        <getres_s str="var sf1 = StackFlat(&quot;sf1&quot;);">
          <arg value="sf1" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sf1" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="sf1:Orientation = &quot;horizontal&quot;;">
          <arg value="Orientation" con="mem">
            <arg value="sf1" con="var" />
          </arg>
          <arg value="horizontal" con="str" />
        </getres_s>
        <var_s varname="tip1" str="var tip1 = Tip(&quot;tip1&quot;);" />
        <getres_s str="var tip1 = Tip(&quot;tip1&quot;);">
          <arg value="tip1" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip1" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip1:Text = &quot;项目名称&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip1" con="var" />
          </arg>
          <arg value="项目名称" con="str" />
        </getres_s>
        <getres_s str="tip1:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip1" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip1:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="tip1" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="et1" str="var et1 = EditText(&quot;et1&quot;);" />
        <getres_s str="var et1 = EditText(&quot;et1&quot;);">
          <arg value="et1" con="var" />
          <arg con="fun">
            <fun>
              <arg value="EditText" con="var" />
            </fun>
            <params>
              <arg value="et1" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:cet1 = et1;">
          <arg value="cet1" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="et1" con="var" />
        </getres_s>
        <getres_s str="et1:Width = 300;">
          <arg value="Width" con="mem">
            <arg value="et1" con="var" />
          </arg>
          <arg value="300" con="num" />
        </getres_s>
        <usefun_s str="sf1:Add(tip1);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf1" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip1" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="sf1:Add(et1);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf1" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="et1" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="sf2" str="var sf2 = StackFlat(&quot;sf2&quot;);" />
        <getres_s str="var sf2 = StackFlat(&quot;sf2&quot;);">
          <arg value="sf2" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sf2" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="sf2:Orientation = &quot;horizontal&quot;;">
          <arg value="Orientation" con="mem">
            <arg value="sf2" con="var" />
          </arg>
          <arg value="horizontal" con="str" />
        </getres_s>
        <var_s varname="tip2" str="var tip2 = Tip(&quot;tip2&quot;);" />
        <getres_s str="var tip2 = Tip(&quot;tip2&quot;);">
          <arg value="tip2" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip2" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip2:Text = &quot;初始版本&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip2" con="var" />
          </arg>
          <arg value="初始版本" con="str" />
        </getres_s>
        <getres_s str="tip2:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip2" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip2:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="tip2" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="et2" str="var et2 = EditText(&quot;et2&quot;);" />
        <getres_s str="var et2 = EditText(&quot;et2&quot;);">
          <arg value="et2" con="var" />
          <arg con="fun">
            <fun>
              <arg value="EditText" con="var" />
            </fun>
            <params>
              <arg value="et2" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:cet2 = et2;">
          <arg value="cet2" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="et2" con="var" />
        </getres_s>
        <getres_s str="et2:Width = 300;">
          <arg value="Width" con="mem">
            <arg value="et2" con="var" />
          </arg>
          <arg value="300" con="num" />
        </getres_s>
        <getres_s str="et2:Text = &quot;1.0&quot;;">
          <arg value="Text" con="mem">
            <arg value="et2" con="var" />
          </arg>
          <arg value="1.0" con="str" />
        </getres_s>
        <usefun_s str="sf2:Add(tip2);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf2" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip2" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="sf2:Add(et2);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf2" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="et2" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="sf3" str="var sf3 = StackFlat(&quot;sf3&quot;);" />
        <getres_s str="var sf3 = StackFlat(&quot;sf3&quot;);">
          <arg value="sf3" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sf3" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="sf3:Orientation = &quot;horizontal&quot;;">
          <arg value="Orientation" con="mem">
            <arg value="sf3" con="var" />
          </arg>
          <arg value="horizontal" con="str" />
        </getres_s>
        <var_s varname="tip3" str="var tip3 = Tip(&quot;tip3&quot;);" />
        <getres_s str="var tip3 = Tip(&quot;tip3&quot;);">
          <arg value="tip3" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip3" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip3:Text = &quot;项目作者&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip3" con="var" />
          </arg>
          <arg value="项目作者" con="str" />
        </getres_s>
        <getres_s str="tip3:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip3" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip3:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="tip3" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="et3" str="var et3 = EditText(&quot;et3&quot;);" />
        <getres_s str="var et3 = EditText(&quot;et3&quot;);">
          <arg value="et3" con="var" />
          <arg con="fun">
            <fun>
              <arg value="EditText" con="var" />
            </fun>
            <params>
              <arg value="et3" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:cet3 = et3;">
          <arg value="cet3" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="et3" con="var" />
        </getres_s>
        <getres_s str="et3:Width = 300;">
          <arg value="Width" con="mem">
            <arg value="et3" con="var" />
          </arg>
          <arg value="300" con="num" />
        </getres_s>
        <getres_s str="et3:Text = &quot;writer&quot;;">
          <arg value="Text" con="mem">
            <arg value="et3" con="var" />
          </arg>
          <arg value="writer" con="str" />
        </getres_s>
        <usefun_s str="sf3:Add(tip3);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf3" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip3" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="sf3:Add(et3);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf3" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="et3" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="sf4" str="var sf4 = StackFlat(&quot;sf4&quot;);" />
        <getres_s str="var sf4 = StackFlat(&quot;sf4&quot;);">
          <arg value="sf4" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sf4" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="sf4:Orientation = &quot;horizontal&quot;;">
          <arg value="Orientation" con="mem">
            <arg value="sf4" con="var" />
          </arg>
          <arg value="horizontal" con="str" />
        </getres_s>
        <var_s varname="tip4" str="var tip4 = Tip(&quot;tip4&quot;);" />
        <getres_s str="var tip4 = Tip(&quot;tip4&quot;);">
          <arg value="tip4" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip4" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip4:Text = &quot;唯一标志&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip4" con="var" />
          </arg>
          <arg value="唯一标志" con="str" />
        </getres_s>
        <getres_s str="tip4:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip4" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip4:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="tip4" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="et4" str="var et4 = EditText(&quot;et4&quot;);" />
        <getres_s str="var et4 = EditText(&quot;et4&quot;);">
          <arg value="et4" con="var" />
          <arg con="fun">
            <fun>
              <arg value="EditText" con="var" />
            </fun>
            <params>
              <arg value="et4" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:cet4 = et4;">
          <arg value="cet4" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="et4" con="var" />
        </getres_s>
        <getres_s str="et4:Width = 300;">
          <arg value="Width" con="mem">
            <arg value="et4" con="var" />
          </arg>
          <arg value="300" con="num" />
        </getres_s>
        <getres_s str="et4:Text = Random(100000,999999);">
          <arg value="Text" con="mem">
            <arg value="et4" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="Random" con="var" />
            </fun>
            <params>
              <arg value="100000" con="num" />
              <arg value="999999" con="num" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="sf4:Add(tip4);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf4" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip4" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="sf4:Add(et4);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf4" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="et4" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="sf5" str="var sf5 = StackFlat(&quot;sf5&quot;);" />
        <getres_s str="var sf5 = StackFlat(&quot;sf5&quot;);">
          <arg value="sf5" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sf5" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="sf5:Orientation = &quot;horizontal&quot;;">
          <arg value="Orientation" con="mem">
            <arg value="sf5" con="var" />
          </arg>
          <arg value="horizontal" con="str" />
        </getres_s>
        <var_s varname="tip5" str="var tip5 = Tip(&quot;tip5&quot;);" />
        <getres_s str="var tip5 = Tip(&quot;tip5&quot;);">
          <arg value="tip5" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip5" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip5:Text = &quot;帮助链接&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip5" con="var" />
          </arg>
          <arg value="帮助链接" con="str" />
        </getres_s>
        <getres_s str="tip5:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip5" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip5:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="tip5" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="et5" str="var et5 = EditText(&quot;et5&quot;);" />
        <getres_s str="var et5 = EditText(&quot;et5&quot;);">
          <arg value="et5" con="var" />
          <arg con="fun">
            <fun>
              <arg value="EditText" con="var" />
            </fun>
            <params>
              <arg value="et5" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:cet5 = et5;">
          <arg value="cet5" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="et5" con="var" />
        </getres_s>
        <getres_s str="et5:Width = 300;">
          <arg value="Width" con="mem">
            <arg value="et5" con="var" />
          </arg>
          <arg value="300" con="num" />
        </getres_s>
        <getres_s str="et5:Text = &quot;freeman@gasoline&quot;;">
          <arg value="Text" con="mem">
            <arg value="et5" con="var" />
          </arg>
          <arg value="freeman@gasoline" con="str" />
        </getres_s>
        <usefun_s str="sf5:Add(tip5);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf5" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip5" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="sf5:Add(et5);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf5" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="et5" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="sf6" str="var sf6 = StackFlat(&quot;sf6&quot;);" />
        <getres_s str="var sf6 = StackFlat(&quot;sf6&quot;);">
          <arg value="sf6" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sf6" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="sf6:Orientation = &quot;horizontal&quot;;">
          <arg value="Orientation" con="mem">
            <arg value="sf6" con="var" />
          </arg>
          <arg value="horizontal" con="str" />
        </getres_s>
        <var_s varname="tip6" str="var tip6 = Tip(&quot;tip6&quot;);" />
        <getres_s str="var tip6 = Tip(&quot;tip6&quot;);">
          <arg value="tip6" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip6" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip6:Text = &quot;项目位置&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip6" con="var" />
          </arg>
          <arg value="项目位置" con="str" />
        </getres_s>
        <getres_s str="tip6:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip6" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip6:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="tip6" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="et6" str="var et6 = EditText(&quot;et6&quot;);" />
        <getres_s str="var et6 = EditText(&quot;et6&quot;);">
          <arg value="et6" con="var" />
          <arg con="fun">
            <fun>
              <arg value="EditText" con="var" />
            </fun>
            <params>
              <arg value="et6" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:cet6 = et6;">
          <arg value="cet6" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="et6" con="var" />
        </getres_s>
        <getres_s str="et6:Width = 300;">
          <arg value="Width" con="mem">
            <arg value="et6" con="var" />
          </arg>
          <arg value="300" con="num" />
        </getres_s>
        <getres_s str="et6:Text = &quot;x:\freestudio&quot;;">
          <arg value="Text" con="mem">
            <arg value="et6" con="var" />
          </arg>
          <arg value="x:\freestudio" con="str" />
        </getres_s>
        <usefun_s str="sf6:Add(tip6);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf6" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip6" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="sf6:Add(et6);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf6" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="et6" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="sf7" str="var sf7 = StackFlat(&quot;sf7&quot;);" />
        <getres_s str="var sf7 = StackFlat(&quot;sf7&quot;);">
          <arg value="sf7" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sf7" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="sf7:Orientation = &quot;horizontal&quot;;">
          <arg value="Orientation" con="mem">
            <arg value="sf7" con="var" />
          </arg>
          <arg value="horizontal" con="str" />
        </getres_s>
        <var_s varname="tip7" str="var tip7 = Tip(&quot;tip7&quot;);" />
        <getres_s str="var tip7 = Tip(&quot;tip7&quot;);">
          <arg value="tip7" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip7" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip7:Text = &quot;是否为类库&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip7" con="var" />
          </arg>
          <arg value="是否为类库" con="str" />
        </getres_s>
        <getres_s str="tip7:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip7" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip7:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="tip7" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="switcher" str="var switcher = Switcher(&quot;sw&quot;);" />
        <getres_s str="var switcher = Switcher(&quot;sw&quot;);">
          <arg value="switcher" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Switcher" con="var" />
            </fun>
            <params>
              <arg value="sw" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:cswitcher = switcher;">
          <arg value="cswitcher" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="switcher" con="var" />
        </getres_s>
        <getres_s str="switcher:Togged = false;">
          <arg value="Togged" con="mem">
            <arg value="switcher" con="var" />
          </arg>
          <arg value="false" con="var" />
        </getres_s>
        <usefun_s str="sf7:Add(tip7);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf7" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip7" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="sf7:Add(switcher);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="sf7" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="switcher" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="msf:Add(sf1);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="msf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="sf1" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="msf:Add(sf2);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="msf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="sf2" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="msf:Add(sf3);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="msf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="sf3" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="msf:Add(sf4);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="msf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="sf4" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="msf:Add(sf5);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="msf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="sf5" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="msf:Add(sf6);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="msf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="sf6" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="msf:Add(sf7);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="msf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="sf7" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="ssf" str="var ssf = StackFlat(&quot;ssf&quot;);" />
        <getres_s str="var ssf = StackFlat(&quot;ssf&quot;);">
          <arg value="ssf" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="ssf" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="ssf:Orientation = &quot;horizontal&quot;;">
          <arg value="Orientation" con="mem">
            <arg value="ssf" con="var" />
          </arg>
          <arg value="horizontal" con="str" />
        </getres_s>
        <getres_s str="ssf:Horizontal = &quot;right&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="ssf" con="var" />
          </arg>
          <arg value="right" con="str" />
        </getres_s>
        <var_s varname="bu_creat" str="var bu_creat = Bubble(&quot;bu1&quot;);" />
        <getres_s str="var bu_creat = Bubble(&quot;bu1&quot;);">
          <arg value="bu_creat" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bu1" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="bu_cancel" str="var bu_cancel = Bubble(&quot;bu2&quot;);" />
        <getres_s str="var bu_cancel = Bubble(&quot;bu2&quot;);">
          <arg value="bu_cancel" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bu2" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_creat:Text = &quot;创建&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_creat" con="var" />
          </arg>
          <arg value="创建" con="str" />
        </getres_s>
        <getres_s str="bu_cancel:Text = &quot;取消&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_cancel" con="var" />
          </arg>
          <arg value="取消" con="str" />
        </getres_s>
        <getres_s str="bu_creat:Margin = List(20,20,20,20);">
          <arg value="Margin" con="mem">
            <arg value="bu_creat" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="20" con="num" />
              <arg value="20" con="num" />
              <arg value="20" con="num" />
              <arg value="20" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_cancel:Margin = List(20,20,20,20);">
          <arg value="Margin" con="mem">
            <arg value="bu_cancel" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="20" con="num" />
              <arg value="20" con="num" />
              <arg value="20" con="num" />
              <arg value="20" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_cancel:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_cancel" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_creat:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_creat" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_cancel:Clickevent = this:Cancel_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_cancel" con="var" />
          </arg>
          <arg value="Cancel_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="bu_creat:Clickevent = this:Creat_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_creat" con="var" />
          </arg>
          <arg value="Creat_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <usefun_s str="ssf:Add(bu_creat);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="ssf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_creat" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="ssf:Add(bu_cancel);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="ssf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_cancel" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="mgf:Add(msf,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="mgf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="msf" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="mgf:Add(ssf,1,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="mgf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="ssf" con="var" />
              <arg value="1" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:SetContent(mgf);">
          <arg con="fun">
            <fun>
              <arg value="SetContent" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="mgf" con="var" />
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="Cancel_Click" params="p,e" isref="False" isstatic="False">
        <usefun_s str="PageReturn();">
          <arg con="fun">
            <fun>
              <arg value="PageReturn" con="var" />
            </fun>
            <params />
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="Creat_Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="pname" str="var pname = this:cet1:Text,iversion = this:cet2:Text,writer = this:cet3:Text;" />
        <getres_s str="var pname = this:cet1:Text,iversion = this:cet2:Text,writer = this:cet3:Text;">
          <arg value="pname" con="var" />
          <arg value="Text" con="mem">
            <arg value="cet1" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
        </getres_s>
        <var_s varname="iversion" str="var pname = this:cet1:Text,iversion = this:cet2:Text,writer = this:cet3:Text;" />
        <getres_s str="var pname = this:cet1:Text,iversion = this:cet2:Text,writer = this:cet3:Text;">
          <arg value="iversion" con="var" />
          <arg value="Text" con="mem">
            <arg value="cet2" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
        </getres_s>
        <var_s varname="writer" str="var pname = this:cet1:Text,iversion = this:cet2:Text,writer = this:cet3:Text;" />
        <getres_s str="var pname = this:cet1:Text,iversion = this:cet2:Text,writer = this:cet3:Text;">
          <arg value="writer" con="var" />
          <arg value="Text" con="mem">
            <arg value="cet3" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
        </getres_s>
        <var_s varname="id" str="var id = this:cet4:Text,hlink = this:cet5:Text,ppath = this:cet6:Text,isclass = this:cswitcher:Togged;" />
        <getres_s str="var id = this:cet4:Text,hlink = this:cet5:Text,ppath = this:cet6:Text,isclass = this:cswitcher:Togged;">
          <arg value="id" con="var" />
          <arg value="Text" con="mem">
            <arg value="cet4" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
        </getres_s>
        <var_s varname="hlink" str="var id = this:cet4:Text,hlink = this:cet5:Text,ppath = this:cet6:Text,isclass = this:cswitcher:Togged;" />
        <getres_s str="var id = this:cet4:Text,hlink = this:cet5:Text,ppath = this:cet6:Text,isclass = this:cswitcher:Togged;">
          <arg value="hlink" con="var" />
          <arg value="Text" con="mem">
            <arg value="cet5" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
        </getres_s>
        <var_s varname="ppath" str="var id = this:cet4:Text,hlink = this:cet5:Text,ppath = this:cet6:Text,isclass = this:cswitcher:Togged;" />
        <getres_s str="var id = this:cet4:Text,hlink = this:cet5:Text,ppath = this:cet6:Text,isclass = this:cswitcher:Togged;">
          <arg value="ppath" con="var" />
          <arg value="Text" con="mem">
            <arg value="cet6" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
        </getres_s>
        <var_s varname="isclass" str="var id = this:cet4:Text,hlink = this:cet5:Text,ppath = this:cet6:Text,isclass = this:cswitcher:Togged;" />
        <getres_s str="var id = this:cet4:Text,hlink = this:cet5:Text,ppath = this:cet6:Text,isclass = this:cswitcher:Togged;">
          <arg value="isclass" con="var" />
          <arg value="Togged" con="mem">
            <arg value="cswitcher" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
        </getres_s>
        <var_s varname="projectpath" str="var projectpath = ppath&amp;&quot;\\&quot;&amp;pname;" />
        <getres_s str="var projectpath = ppath&amp;&quot;\\&quot;&amp;pname;">
          <arg value="projectpath" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StringAdd" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="ppath" con="var" />
                  <arg value="\" con="str" />
                </params>
              </arg>
              <arg value="pname" con="var" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="CreatDirectory(projectpath);">
          <arg con="fun">
            <fun>
              <arg value="CreatDirectory" con="var" />
            </fun>
            <params>
              <arg value="projectpath" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="xmldoc" str="var xmldoc = XmlDocument();" />
        <getres_s str="var xmldoc = XmlDocument();">
          <arg value="xmldoc" con="var" />
          <arg con="fun">
            <fun>
              <arg value="XmlDocument" con="var" />
            </fun>
            <params />
          </arg>
        </getres_s>
        <var_s varname="gcaelement" str="var gcaelement = xmldoc:CreatElement(&quot;gca&quot;);" />
        <getres_s str="var gcaelement = xmldoc:CreatElement(&quot;gca&quot;);">
          <arg value="gcaelement" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="gca" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="gcaelement:SetAttribute(&quot;name&quot;,pname);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="name" con="str" />
              <arg value="pname" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="gcaelement:SetAttribute(&quot;version&quot;,iversion);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="version" con="str" />
              <arg value="iversion" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="gcaelement:SetAttribute(&quot;id&quot;,id);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="id" con="str" />
              <arg value="id" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="gcaelement:SetAttribute(&quot;writer&quot;,writer);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="writer" con="str" />
              <arg value="writer" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="gcaelement:SetAttribute(&quot;helplink&quot;,hlink);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="helplink" con="str" />
              <arg value="hlink" con="var" />
            </params>
          </arg>
        </usefun_s>
        <if_s str="if(isclass):">
          <then>
            <express>
              <arg value="isclass" con="var" />
            </express>
            <run>
              <usefun_s str="gcaelement:SetAttribute(&quot;type&quot;,&quot;lib&quot;);">
                <arg con="fun">
                  <fun>
                    <arg value="SetAttribute" con="mem">
                      <arg value="gcaelement" con="var" />
                    </arg>
                  </fun>
                  <params>
                    <arg value="type" con="str" />
                    <arg value="lib" con="str" />
                  </params>
                </arg>
              </usefun_s>
            </run>
          </then>
          <else>
            <run>
              <usefun_s str="gcaelement:SetAttribute(&quot;type&quot;,&quot;program&quot;);">
                <arg con="fun">
                  <fun>
                    <arg value="SetAttribute" con="mem">
                      <arg value="gcaelement" con="var" />
                    </arg>
                  </fun>
                  <params>
                    <arg value="type" con="str" />
                    <arg value="program" con="str" />
                  </params>
                </arg>
              </usefun_s>
            </run>
          </else>
        </if_s>
        <var_s varname="source_ele" str="var source_ele = xmldoc:CreatElement(&quot;source&quot;);" />
        <getres_s str="var source_ele = xmldoc:CreatElement(&quot;source&quot;);">
          <arg value="source_ele" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="source" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="code_ele" str="var code_ele = xmldoc:CreatElement(&quot;code&quot;);" />
        <getres_s str="var code_ele = xmldoc:CreatElement(&quot;code&quot;);">
          <arg value="code_ele" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="code" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="code_ele:SetAttribute(&quot;path&quot;,&quot;mainpage.gas&quot;);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="code_ele" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="path" con="str" />
              <arg value="mainpage.gas" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="source_ele:AddChild(code_ele);">
          <arg con="fun">
            <fun>
              <arg value="AddChild" con="mem">
                <arg value="source_ele" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="code_ele" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="gaasource_ele" str="var gaasource_ele = xmldoc:CreatElement(&quot;gaasource&quot;);" />
        <getres_s str="var gaasource_ele = xmldoc:CreatElement(&quot;gaasource&quot;);">
          <arg value="gaasource_ele" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="gaasource" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="gaasource_ele:SetAttribute(&quot;path&quot;,pname);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="gaasource_ele" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="path" con="str" />
              <arg value="pname" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="gaabuild_ele" str="var gaabuild_ele = xmldoc:CreatElement(&quot;gaabuild&quot;);" />
        <getres_s str="var gaabuild_ele = xmldoc:CreatElement(&quot;gaabuild&quot;);">
          <arg value="gaabuild_ele" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="gaabuild" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="gaabuild_ele:SetAttribute(&quot;path&quot;,&quot;debug&quot;);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="gaabuild_ele" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="path" con="str" />
              <arg value="debug" con="str" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="platforms_ele" str="var platforms_ele = xmldoc:CreatElement(&quot;platforms&quot;);" />
        <getres_s str="var platforms_ele = xmldoc:CreatElement(&quot;platforms&quot;);">
          <arg value="platforms_ele" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="platforms" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="dependences_ele" str="var dependences_ele = xmldoc:CreatElement(&quot;dependences&quot;);" />
        <getres_s str="var dependences_ele = xmldoc:CreatElement(&quot;dependences&quot;);">
          <arg value="dependences_ele" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="dependences" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="gcaelement:AddChild(source_ele);">
          <arg con="fun">
            <fun>
              <arg value="AddChild" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="source_ele" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="gcaelement:AddChild(gaasource_ele);">
          <arg con="fun">
            <fun>
              <arg value="AddChild" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="gaasource_ele" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="gcaelement:AddChild(gaabuild_ele);">
          <arg con="fun">
            <fun>
              <arg value="AddChild" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="gaabuild_ele" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="gcaelement:AddChild(platforms_ele);">
          <arg con="fun">
            <fun>
              <arg value="AddChild" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="platforms_ele" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="gcaelement:AddChild(dependences_ele);">
          <arg con="fun">
            <fun>
              <arg value="AddChild" con="mem">
                <arg value="gcaelement" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="dependences_ele" con="var" />
            </params>
          </arg>
        </usefun_s>
        <getres_s str="xmldoc:Content = gcaelement;">
          <arg value="Content" con="mem">
            <arg value="xmldoc" con="var" />
          </arg>
          <arg value="gcaelement" con="var" />
        </getres_s>
        <var_s varname="str" str="var str = FileOpen(projectpath&amp;&quot;\\&quot;&amp;pname&amp;&quot;.gca&quot;,&quot;creat&quot;);" />
        <getres_s str="var str = FileOpen(projectpath&amp;&quot;\\&quot;&amp;pname&amp;&quot;.gca&quot;,&quot;creat&quot;);">
          <arg value="str" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg value="projectpath" con="var" />
                          <arg value="\" con="str" />
                        </params>
                      </arg>
                      <arg value="pname" con="var" />
                    </params>
                  </arg>
                  <arg value=".gca" con="str" />
                </params>
              </arg>
              <arg value="creat" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="xmldoc:Save(str);">
          <arg con="fun">
            <fun>
              <arg value="Save" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="str" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="str:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="str" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <usefun_s str="CreatDirectory(projectpath&amp;&quot;\\debug&quot;);">
          <arg con="fun">
            <fun>
              <arg value="CreatDirectory" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="projectpath" con="var" />
                  <arg value="\debug" con="str" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="CreatDirectory(projectpath&amp;&quot;\\platform&quot;);">
          <arg con="fun">
            <fun>
              <arg value="CreatDirectory" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="projectpath" con="var" />
                  <arg value="\platform" con="str" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <var_s varname="mainpage_stream" str="var mainpage_stream = FileOpen(projectpath&amp;&quot;\\mainpage.gas&quot;,&quot;creat&quot;);" />
        <getres_s str="var mainpage_stream = FileOpen(projectpath&amp;&quot;\\mainpage.gas&quot;,&quot;creat&quot;);">
          <arg value="mainpage_stream" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="projectpath" con="var" />
                  <arg value="\mainpage.gas" con="str" />
                </params>
              </arg>
              <arg value="creat" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="mainpage_stream:WriteText(&quot;lib &quot;&amp;pname&amp;&quot;:\r\n    get IO;\r\n    fun Main\(args\):\r\n        WriteLine\(\&quot;gasoline\&quot;\);&quot;);">
          <arg con="fun">
            <fun>
              <arg value="WriteText" con="mem">
                <arg value="mainpage_stream" con="var" />
              </arg>
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="lib " con="str" />
                      <arg value="pname" con="var" />
                    </params>
                  </arg>
                  <arg value=":&#xD;&#xA;    get IO;&#xD;&#xA;    fun Main(args):&#xD;&#xA;        WriteLine(&quot;gasoline&quot;);" con="str" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="mainpage_stream:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="mainpage_stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <usefun_s str="PageReturn();">
          <arg con="fun">
            <fun>
              <arg value="PageReturn" con="var" />
            </fun>
            <params />
          </arg>
        </usefun_s>
        <var_s varname="stream" str="var stream = FileOpen(projectpath&amp;&quot;\\&quot;&amp;pname&amp;&quot;.gca&quot;,&quot;open&quot;);" />
        <getres_s str="var stream = FileOpen(projectpath&amp;&quot;\\&quot;&amp;pname&amp;&quot;.gca&quot;,&quot;open&quot;);">
          <arg value="stream" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg value="projectpath" con="var" />
                          <arg value="\" con="str" />
                        </params>
                      </arg>
                      <arg value="pname" con="var" />
                    </params>
                  </arg>
                  <arg value=".gca" con="str" />
                </params>
              </arg>
              <arg value="open" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="xml" str="var xml = XmlDocument();" />
        <getres_s str="var xml = XmlDocument();">
          <arg value="xml" con="var" />
          <arg con="fun">
            <fun>
              <arg value="XmlDocument" con="var" />
            </fun>
            <params />
          </arg>
        </getres_s>
        <usefun_s str="xml:Load(stream);">
          <arg con="fun">
            <fun>
              <arg value="Load" con="mem">
                <arg value="xml" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stream" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stream:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <usefun_s str="LoadEditor(xml,projectpath&amp;&quot;\\&quot;&amp;pname&amp;&quot;.gca&quot;);">
          <arg con="fun">
            <fun>
              <arg value="LoadEditor" con="var" />
            </fun>
            <params>
              <arg value="xml" con="var" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg value="projectpath" con="var" />
                          <arg value="\" con="str" />
                        </params>
                      </arg>
                      <arg value="pname" con="var" />
                    </params>
                  </arg>
                  <arg value=".gca" con="str" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
      </memfun>
    </cls>
  </lib>
  <lib name="FreeStudio">
    <get value="Thread" />
    <var value="sta_xml_gca" />
    <var value="editpage" />
    <deffun funname="Record" params="text" isref="False">
      <usefun_s str="editpage:Record(text);">
        <arg con="fun">
          <fun>
            <arg value="Record" con="mem">
              <arg value="editpage" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="text" con="var" />
          </params>
        </arg>
      </usefun_s>
    </deffun>
    <deffun funname="LoadEditor" params="xml_gac,path" isref="False">
      <getres_s str="sta_xml_gca = xml_gac;">
        <arg value="sta_xml_gca" con="var" />
        <arg value="xml_gac" con="var" />
      </getres_s>
      <var_s varname="ele_gca" str="var ele_gca = xml_gac:Content;" />
      <getres_s str="var ele_gca = xml_gac:Content;">
        <arg value="ele_gca" con="var" />
        <arg value="Content" con="mem">
          <arg value="xml_gac" con="var" />
        </arg>
      </getres_s>
      <var_s varname="page" str="var page = EditPage(&quot;FreeStudio&quot;);" />
      <getres_s str="var page = EditPage(&quot;FreeStudio&quot;);">
        <arg value="page" con="var" />
        <arg con="fun">
          <fun>
            <arg value="EditPage" con="var" />
          </fun>
          <params>
            <arg value="FreeStudio" con="str" />
          </params>
        </arg>
      </getres_s>
      <getres_s str="editpage = page;">
        <arg value="editpage" con="var" />
        <arg value="page" con="var" />
      </getres_s>
      <getres_s str="page:gca_name = ele_gca:GetAttribute(&quot;name&quot;);">
        <arg value="gca_name" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="GetAttribute" con="mem">
              <arg value="ele_gca" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="name" con="str" />
          </params>
        </arg>
      </getres_s>
      <getres_s str="page:gca_version = ele_gca:GetAttribute(&quot;version&quot;);">
        <arg value="gca_version" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="GetAttribute" con="mem">
              <arg value="ele_gca" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="version" con="str" />
          </params>
        </arg>
      </getres_s>
      <getres_s str="page:gca_id = ele_gca:GetAttribute(&quot;id&quot;);">
        <arg value="gca_id" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="GetAttribute" con="mem">
              <arg value="ele_gca" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="id" con="str" />
          </params>
        </arg>
      </getres_s>
      <getres_s str="page:gca_writer = ele_gca:GetAttribute(&quot;writer&quot;);">
        <arg value="gca_writer" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="GetAttribute" con="mem">
              <arg value="ele_gca" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="writer" con="str" />
          </params>
        </arg>
      </getres_s>
      <getres_s str="page:gca_helplink = ele_gca:GetAttribute(&quot;helplink&quot;);">
        <arg value="gca_helplink" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="GetAttribute" con="mem">
              <arg value="ele_gca" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="helplink" con="str" />
          </params>
        </arg>
      </getres_s>
      <getres_s str="page:gca_type = ele_gca:GetAttribute(&quot;type&quot;);">
        <arg value="gca_type" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="GetAttribute" con="mem">
              <arg value="ele_gca" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="type" con="str" />
          </params>
        </arg>
      </getres_s>
      <getres_s str="page:ls_codes = List();">
        <arg value="ls_codes" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="List" con="var" />
          </fun>
          <params />
        </arg>
      </getres_s>
      <getres_s str="page:ls_dependences = List();">
        <arg value="ls_dependences" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="List" con="var" />
          </fun>
          <params />
        </arg>
      </getres_s>
      <getres_s str="page:ls_platforms = List();">
        <arg value="ls_platforms" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="List" con="var" />
          </fun>
          <params />
        </arg>
      </getres_s>
      <getres_s str="page:gca_path = path:Replace(page:gca_name&amp;&quot;.gca&quot;,&quot;&quot;);">
        <arg value="gca_path" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="Replace" con="mem">
              <arg value="path" con="var" />
            </arg>
          </fun>
          <params>
            <arg con="fun">
              <fun>
                <arg value="StringAdd" con="var" />
              </fun>
              <params>
                <arg value="gca_name" con="mem">
                  <arg value="page" con="var" />
                </arg>
                <arg value=".gca" con="str" />
              </params>
            </arg>
            <arg value="" con="str" />
          </params>
        </arg>
      </getres_s>
      <var_s varname="ele_source" str="var ele_source = ele_gca:GetChild(0);" />
      <getres_s str="var ele_source = ele_gca:GetChild(0);">
        <arg value="ele_source" con="var" />
        <arg con="fun">
          <fun>
            <arg value="GetChild" con="mem">
              <arg value="ele_gca" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="0" con="num" />
          </params>
        </arg>
      </getres_s>
      <foreach_s var_togive="i" var_new="True" str="foreach(var i,Range(0,ele_source:Count)):">
        <from>
          <arg con="fun">
            <fun>
              <arg value="Range" con="var" />
            </fun>
            <params>
              <arg value="0" con="num" />
              <arg value="Count" con="mem">
                <arg value="ele_source" con="var" />
              </arg>
            </params>
          </arg>
        </from>
        <run>
          <usefun_s str="page:ls_codes:Add(ele_source:GetChild(i):GetAttribute(&quot;path&quot;));">
            <arg con="fun">
              <fun>
                <arg value="Add" con="mem">
                  <arg value="ls_codes" con="mem">
                    <arg value="page" con="var" />
                  </arg>
                </arg>
              </fun>
              <params>
                <arg con="fun">
                  <fun>
                    <arg value="GetAttribute" con="mem">
                      <arg con="fun">
                        <fun>
                          <arg value="GetChild" con="mem">
                            <arg value="ele_source" con="var" />
                          </arg>
                        </fun>
                        <params>
                          <arg value="i" con="var" />
                        </params>
                      </arg>
                    </arg>
                  </fun>
                  <params>
                    <arg value="path" con="str" />
                  </params>
                </arg>
              </params>
            </arg>
          </usefun_s>
        </run>
      </foreach_s>
      <usefun_s str="page:Refreshcodeslist();">
        <arg con="fun">
          <fun>
            <arg value="Refreshcodeslist" con="mem">
              <arg value="page" con="var" />
            </arg>
          </fun>
          <params />
        </arg>
      </usefun_s>
      <var_s varname="firstcode" str="var firstcode = page:ls_codes(0);" />
      <getres_s str="var firstcode = page:ls_codes(0);">
        <arg value="firstcode" con="var" />
        <arg con="fun">
          <fun>
            <arg value="ls_codes" con="mem">
              <arg value="page" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="0" con="num" />
          </params>
        </arg>
      </getres_s>
      <getres_s str="page:gaa_sourcepath =  ele_gca:GetChild(1):GetAttribute(&quot;path&quot;);">
        <arg value="gaa_sourcepath" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="GetAttribute" con="mem">
              <arg con="fun">
                <fun>
                  <arg value="GetChild" con="mem">
                    <arg value="ele_gca" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="1" con="num" />
                </params>
              </arg>
            </arg>
          </fun>
          <params>
            <arg value="path" con="str" />
          </params>
        </arg>
      </getres_s>
      <getres_s str="page:gaa_buildpath = ele_gca:GetChild(2):GetAttribute(&quot;path&quot;);">
        <arg value="gaa_buildpath" con="mem">
          <arg value="page" con="var" />
        </arg>
        <arg con="fun">
          <fun>
            <arg value="GetAttribute" con="mem">
              <arg con="fun">
                <fun>
                  <arg value="GetChild" con="mem">
                    <arg value="ele_gca" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="2" con="num" />
                </params>
              </arg>
            </arg>
          </fun>
          <params>
            <arg value="path" con="str" />
          </params>
        </arg>
      </getres_s>
      <usefun_s str="page:Refreshplatformlist(xml_gac);">
        <arg con="fun">
          <fun>
            <arg value="Refreshplatformlist" con="mem">
              <arg value="page" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="xml_gac" con="var" />
          </params>
        </arg>
      </usefun_s>
      <foreach_s var_togive="i" var_new="True" str="foreach(var i,Range(0,ele_gca:GetChild(4):Count)):">
        <from>
          <arg con="fun">
            <fun>
              <arg value="Range" con="var" />
            </fun>
            <params>
              <arg value="0" con="num" />
              <arg value="Count" con="mem">
                <arg con="fun">
                  <fun>
                    <arg value="GetChild" con="mem">
                      <arg value="ele_gca" con="var" />
                    </arg>
                  </fun>
                  <params>
                    <arg value="4" con="num" />
                  </params>
                </arg>
              </arg>
            </params>
          </arg>
        </from>
        <run>
          <var_s varname="ele_deps" str="var ele_deps = ele_gca:GetChild(4):GetChild(i);" />
          <getres_s str="var ele_deps = ele_gca:GetChild(4):GetChild(i);">
            <arg value="ele_deps" con="var" />
            <arg con="fun">
              <fun>
                <arg value="GetChild" con="mem">
                  <arg con="fun">
                    <fun>
                      <arg value="GetChild" con="mem">
                        <arg value="ele_gca" con="var" />
                      </arg>
                    </fun>
                    <params>
                      <arg value="4" con="num" />
                    </params>
                  </arg>
                </arg>
              </fun>
              <params>
                <arg value="i" con="var" />
              </params>
            </arg>
          </getres_s>
          <usefun_s str="page:ls_dependences:Add(ele_deps:GetAttribute(&quot;name&quot;));">
            <arg con="fun">
              <fun>
                <arg value="Add" con="mem">
                  <arg value="ls_dependences" con="mem">
                    <arg value="page" con="var" />
                  </arg>
                </arg>
              </fun>
              <params>
                <arg con="fun">
                  <fun>
                    <arg value="GetAttribute" con="mem">
                      <arg value="ele_deps" con="var" />
                    </arg>
                  </fun>
                  <params>
                    <arg value="name" con="str" />
                  </params>
                </arg>
              </params>
            </arg>
          </usefun_s>
        </run>
      </foreach_s>
      <usefun_s str="page:Loadconfig();">
        <arg con="fun">
          <fun>
            <arg value="Loadconfig" con="mem">
              <arg value="page" con="var" />
            </arg>
          </fun>
          <params />
        </arg>
      </usefun_s>
      <usefun_s str="PageGo(page);">
        <arg con="fun">
          <fun>
            <arg value="PageGo" con="var" />
          </fun>
          <params>
            <arg value="page" con="var" />
          </params>
        </arg>
      </usefun_s>
      <usefun_s str="StartTask(WaitAsync,1500);">
        <arg con="fun">
          <fun>
            <arg value="StartTask" con="var" />
          </fun>
          <params>
            <arg value="WaitAsync" con="var" />
            <arg value="1500" con="num" />
          </params>
        </arg>
      </usefun_s>
      <usefun_s str="page:OpenCode(firstcode);">
        <arg con="fun">
          <fun>
            <arg value="OpenCode" con="mem">
              <arg value="page" con="var" />
            </arg>
          </fun>
          <params>
            <arg value="firstcode" con="var" />
          </params>
        </arg>
      </usefun_s>
    </deffun>
    <deffun funname="WaitAsync" params="time" isref="False">
      <usefun_s str="Sleep(time);">
        <arg con="fun">
          <fun>
            <arg value="Sleep" con="var" />
          </fun>
          <params>
            <arg value="time" con="var" />
          </params>
        </arg>
      </usefun_s>
    </deffun>
    <cls name="EditPage" parent="Page">
      <member value="gca_path" />
      <member value="gca_name" />
      <member value="gca_version" />
      <member value="gca_id" />
      <member value="gca_helplink" />
      <member value="gca_type" />
      <member value="gca_writer" />
      <member value="ls_codes" />
      <member value="gaa_sourcepath" />
      <member value="gaa_buildpath" />
      <member value="ls_platforms" />
      <member value="ls_dependences" />
      <member value="ls_config" />
      <member value="et_output" />
      <member value="sf_output" />
      <member value="grid_edit" />
      <member value="grid_config" />
      <member value="grid_build" />
      <member value="grid_settings" />
      <member value="grid_content" />
      <member value="wv_editer" />
      <member value="lf_codes" />
      <member value="tip_title" />
      <member value="lf_config" />
      <member value="lf_platforms" />
      <memfun funname="init" params="title" isref="False" isstatic="False">
        <var_s varname="maingrid" str="var maingrid = GridFlat(&quot;mg&quot;);" />
        <getres_s str="var maingrid = GridFlat(&quot;mg&quot;);">
          <arg value="maingrid" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="mg" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="maingrid:AddRow(1,&quot;rate&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddRow" con="mem">
                <arg value="maingrid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="rate" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="maingrid:AddRow(100,&quot;value&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddRow" con="mem">
                <arg value="maingrid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="100" con="num" />
              <arg value="value" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="maingrid:AddColumn(60,&quot;value&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddColumn" con="mem">
                <arg value="maingrid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="60" con="num" />
              <arg value="value" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="maingrid:AddColumn(1,&quot;rate&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddColumn" con="mem">
                <arg value="maingrid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="rate" con="str" />
            </params>
          </arg>
        </usefun_s>
        <getres_s str="maingrid:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="maingrid" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <var_s varname="bu_edit" str="var bu_edit = Bubble(&quot;edit&quot;);" />
        <getres_s str="var bu_edit = Bubble(&quot;edit&quot;);">
          <arg value="bu_edit" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="edit" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="bu_config" str="var bu_config = Bubble(&quot;config&quot;);" />
        <getres_s str="var bu_config = Bubble(&quot;config&quot;);">
          <arg value="bu_config" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="config" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="bu_build" str="var bu_build = Bubble(&quot;build&quot;);" />
        <getres_s str="var bu_build = Bubble(&quot;build&quot;);">
          <arg value="bu_build" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="build" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="bu_settings" str="var bu_settings = Bubble(&quot;settings&quot;);" />
        <getres_s str="var bu_settings = Bubble(&quot;settings&quot;);">
          <arg value="bu_settings" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="settings" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_edit:Text = &quot;编辑&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_edit" con="var" />
          </arg>
          <arg value="编辑" con="str" />
        </getres_s>
        <getres_s str="bu_config:Text = &quot;配置&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_config" con="var" />
          </arg>
          <arg value="配置" con="str" />
        </getres_s>
        <getres_s str="bu_build:Text = &quot;编译&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_build" con="var" />
          </arg>
          <arg value="编译" con="str" />
        </getres_s>
        <getres_s str="bu_settings:Text = &quot;设置&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_settings" con="var" />
          </arg>
          <arg value="设置" con="str" />
        </getres_s>
        <getres_s str="bu_edit:Width = 60;">
          <arg value="Width" con="mem">
            <arg value="bu_edit" con="var" />
          </arg>
          <arg value="60" con="num" />
        </getres_s>
        <getres_s str="bu_edit:Height = 40;">
          <arg value="Height" con="mem">
            <arg value="bu_edit" con="var" />
          </arg>
          <arg value="40" con="num" />
        </getres_s>
        <getres_s str="bu_build:Width = 60;">
          <arg value="Width" con="mem">
            <arg value="bu_build" con="var" />
          </arg>
          <arg value="60" con="num" />
        </getres_s>
        <getres_s str="bu_build:Height = 40;">
          <arg value="Height" con="mem">
            <arg value="bu_build" con="var" />
          </arg>
          <arg value="40" con="num" />
        </getres_s>
        <getres_s str="bu_config:Width = 60;">
          <arg value="Width" con="mem">
            <arg value="bu_config" con="var" />
          </arg>
          <arg value="60" con="num" />
        </getres_s>
        <getres_s str="bu_config:Height = 40;">
          <arg value="Height" con="mem">
            <arg value="bu_config" con="var" />
          </arg>
          <arg value="40" con="num" />
        </getres_s>
        <getres_s str="bu_settings:Width = 60;">
          <arg value="Width" con="mem">
            <arg value="bu_settings" con="var" />
          </arg>
          <arg value="60" con="num" />
        </getres_s>
        <getres_s str="bu_settings:Height = 40;">
          <arg value="Height" con="mem">
            <arg value="bu_settings" con="var" />
          </arg>
          <arg value="40" con="num" />
        </getres_s>
        <getres_s str="bu_edit:Margin = List(5,20,5,5);">
          <arg value="Margin" con="mem">
            <arg value="bu_edit" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="20" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_config:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="bu_config" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_build:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="bu_build" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_settings:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="bu_settings" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_edit:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_edit" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_config:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_config" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_build:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_build" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_settings:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_settings" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_edit:Clickevent = this:Edit_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_edit" con="var" />
          </arg>
          <arg value="Edit_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="bu_config:Clickevent = this:Config_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_config" con="var" />
          </arg>
          <arg value="Config_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="bu_build:Clickevent = this:Build_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_build" con="var" />
          </arg>
          <arg value="Build_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="bu_settings:Clickevent = this:Settings_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_settings" con="var" />
          </arg>
          <arg value="Settings_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <var_s varname="stack_left" str="var stack_left  = StackFlat(&quot;sfl&quot;);" />
        <getres_s str="var stack_left  = StackFlat(&quot;sfl&quot;);">
          <arg value="stack_left" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sfl" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="stack_left:Add(bu_edit);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_left" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_edit" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_left:Add(bu_config);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_left" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_config" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_left:Add(bu_build);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_left" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_build" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_left:Add(bu_settings);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_left" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_settings" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="stack_bottom" str="var stack_bottom = StackFlat(&quot;sfb&quot;);" />
        <getres_s str="var stack_bottom = StackFlat(&quot;sfb&quot;);">
          <arg value="stack_bottom" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sfb" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="stack_bottom:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="stack_bottom" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <var_s varname="tip" str="var tip = Tip(&quot;tip1&quot;);" />
        <getres_s str="var tip = Tip(&quot;tip1&quot;);">
          <arg value="tip" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip1" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip:Text = &quot;输出&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip" con="var" />
          </arg>
          <arg value="输出" con="str" />
        </getres_s>
        <getres_s str="tip:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="tip" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip:Horizontal = &quot;left&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="tip" con="var" />
          </arg>
          <arg value="left" con="str" />
        </getres_s>
        <var_s varname="output" str="var output = EditText(&quot;et_output&quot;);" />
        <getres_s str="var output = EditText(&quot;et_output&quot;);">
          <arg value="output" con="var" />
          <arg con="fun">
            <fun>
              <arg value="EditText" con="var" />
            </fun>
            <params>
              <arg value="et_output" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="sf" str="var sf = ScrollFlat(&quot;sf&quot;);" />
        <getres_s str="var sf = ScrollFlat(&quot;sf&quot;);">
          <arg value="sf" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ScrollFlat" con="var" />
            </fun>
            <params>
              <arg value="sf" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="sf:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="sf" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="sf:Height = 65;">
          <arg value="Height" con="mem">
            <arg value="sf" con="var" />
          </arg>
          <arg value="65" con="num" />
        </getres_s>
        <getres_s str="this:et_output = output;">
          <arg value="et_output" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="output" con="var" />
        </getres_s>
        <getres_s str="this:sf_output = sf;">
          <arg value="sf_output" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="sf" con="var" />
        </getres_s>
        <getres_s str="output:Text = &quot;FreeStudio 1.0 output pannel&quot;;">
          <arg value="Text" con="mem">
            <arg value="output" con="var" />
          </arg>
          <arg value="FreeStudio 1.0 output pannel" con="str" />
        </getres_s>
        <getres_s str="output:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="output" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="output:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="output" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <getres_s str="output:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="output" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="output:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="output" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="output:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="output" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <usefun_s str="stack_bottom:Add(tip);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_bottom" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="sf:SetContent(output);">
          <arg con="fun">
            <fun>
              <arg value="SetContent" con="mem">
                <arg value="sf" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="output" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_bottom:Add(sf);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_bottom" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="sf" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="grid_content" str="var grid_content = GridFlat(&quot;grid_content&quot;);" />
        <getres_s str="var grid_content = GridFlat(&quot;grid_content&quot;);">
          <arg value="grid_content" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="grid_content" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_content:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_content" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_content:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="grid_content" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <var_s varname="grid_edit" str="var grid_edit = GridFlat(&quot;grid_edit&quot;);" />
        <getres_s str="var grid_edit = GridFlat(&quot;grid_edit&quot;);">
          <arg value="grid_edit" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="grid_edit" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="grid_config" str="var grid_config = GridFlat(&quot;grid_config&quot;);" />
        <getres_s str="var grid_config = GridFlat(&quot;grid_config&quot;);">
          <arg value="grid_config" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="grid_config" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="grid_build" str="var grid_build = GridFlat(&quot;grid_build&quot;);" />
        <getres_s str="var grid_build = GridFlat(&quot;grid_build&quot;);">
          <arg value="grid_build" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="grid_build" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="grid_settings" str="var grid_settings = GridFlat(&quot;grid_settings&quot;);" />
        <getres_s str="var grid_settings = GridFlat(&quot;grid_settings&quot;);">
          <arg value="grid_settings" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="grid_settings" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_content:Background = &quot;white&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid_content" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="grid_edit:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_edit" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_edit:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="grid_edit" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_config:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_config" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_config:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="grid_config" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_build:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_build" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_build:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="grid_build" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_settings:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_settings" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_settings:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="grid_settings" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_edit:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid_edit" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <getres_s str="grid_config:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid_config" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <getres_s str="grid_build:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid_build" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <getres_s str="grid_settings:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid_settings" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <getres_s str="grid_edit:Margin = List(1,1,1,1);">
          <arg value="Margin" con="mem">
            <arg value="grid_edit" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="1" con="num" />
              <arg value="1" con="num" />
              <arg value="1" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_config:Margin = List(1,1,1,1);">
          <arg value="Margin" con="mem">
            <arg value="grid_config" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="1" con="num" />
              <arg value="1" con="num" />
              <arg value="1" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_build:Margin = List(1,1,1,1);">
          <arg value="Margin" con="mem">
            <arg value="grid_build" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="1" con="num" />
              <arg value="1" con="num" />
              <arg value="1" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_settings:Margin = List(1,1,1,1);">
          <arg value="Margin" con="mem">
            <arg value="grid_settings" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="1" con="num" />
              <arg value="1" con="num" />
              <arg value="1" con="num" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="grid_content:Add(grid_config,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_content" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_config" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid_content:Add(grid_build,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_content" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_build" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid_content:Add(grid_settings,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_content" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_settings" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid_content:Add(grid_edit,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_content" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_edit" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <getres_s str="this:grid_build = grid_build;">
          <arg value="grid_build" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="grid_build" con="var" />
        </getres_s>
        <getres_s str="this:grid_config = grid_config;">
          <arg value="grid_config" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="grid_config" con="var" />
        </getres_s>
        <getres_s str="this:grid_content = grid_content;">
          <arg value="grid_content" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="grid_content" con="var" />
        </getres_s>
        <getres_s str="this:grid_edit = grid_edit;">
          <arg value="grid_edit" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="grid_edit" con="var" />
        </getres_s>
        <getres_s str="this:grid_settings = grid_settings;">
          <arg value="grid_settings" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="grid_settings" con="var" />
        </getres_s>
        <usefun_s str="grid_edit:AddColumn(1,&quot;rate&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddColumn" con="mem">
                <arg value="grid_edit" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="rate" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid_edit:AddColumn(180,&quot;value&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddColumn" con="mem">
                <arg value="grid_edit" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="180" con="num" />
              <arg value="value" con="str" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="stack_edit_right" str="var stack_edit_right = StackFlat(&quot;ser&quot;);" />
        <getres_s str="var stack_edit_right = StackFlat(&quot;ser&quot;);">
          <arg value="stack_edit_right" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="ser" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="stack_edit_right:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="stack_edit_right" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <var_s varname="grid_edit_right_top" str="var grid_edit_right_top = GridFlat(&quot;gert&quot;);" />
        <getres_s str="var grid_edit_right_top = GridFlat(&quot;gert&quot;);">
          <arg value="grid_edit_right_top" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="gert" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_edit_right_top:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_edit_right_top" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_edit_right_top:Height = 40;">
          <arg value="Height" con="mem">
            <arg value="grid_edit_right_top" con="var" />
          </arg>
          <arg value="40" con="num" />
        </getres_s>
        <getres_s str="grid_edit_right_top:Margin = List(5,10,5,5);">
          <arg value="Margin" con="mem">
            <arg value="grid_edit_right_top" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="10" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="tip_edit" str="var tip_edit = Tip(&quot;te&quot;);" />
        <getres_s str="var tip_edit = Tip(&quot;te&quot;);">
          <arg value="tip_edit" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="te" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip_edit:Text = &quot;源代码&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip_edit" con="var" />
          </arg>
          <arg value="源代码" con="str" />
        </getres_s>
        <getres_s str="tip_edit:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip_edit" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip_edit:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="tip_edit" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip_edit:Horizontal = &quot;left&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="tip_edit" con="var" />
          </arg>
          <arg value="left" con="str" />
        </getres_s>
        <usefun_s str="grid_edit_right_top:Add(tip_edit,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_edit_right_top" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip_edit" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_edit_right:Add(grid_edit_right_top);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_right" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_edit_right_top" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="grid_split" str="var grid_split = GridFlat(&quot;split&quot;);" />
        <getres_s str="var grid_split = GridFlat(&quot;split&quot;);">
          <arg value="grid_split" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="split" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_split:Height = 2;">
          <arg value="Height" con="mem">
            <arg value="grid_split" con="var" />
          </arg>
          <arg value="2" con="num" />
        </getres_s>
        <getres_s str="grid_split:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_split" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_split:Vertical = &quot;bottom&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="grid_split" con="var" />
          </arg>
          <arg value="bottom" con="str" />
        </getres_s>
        <getres_s str="grid_split:Background = &quot;white&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid_split" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <usefun_s str="stack_edit_right:Add(grid_split);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_right" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_split" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="lf_codes" str="var lf_codes = ListFlat(&quot;lfc&quot;);" />
        <getres_s str="var lf_codes = ListFlat(&quot;lfc&quot;);">
          <arg value="lf_codes" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ListFlat" con="var" />
            </fun>
            <params>
              <arg value="lfc" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:lf_codes = lf_codes;">
          <arg value="lf_codes" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="lf_codes" con="var" />
        </getres_s>
        <getres_s str="lf_codes:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="lf_codes" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <getres_s str="lf_codes:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="lf_codes" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="stack_edit_right:Add(lf_codes);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_right" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="lf_codes" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="stack_edit_center" str="var stack_edit_center = StackFlat(&quot;sec&quot;);" />
        <getres_s str="var stack_edit_center = StackFlat(&quot;sec&quot;);">
          <arg value="stack_edit_center" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sec" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="stack_edit_center_top" str="var stack_edit_center_top = StackFlat(&quot;sect&quot;);" />
        <getres_s str="var stack_edit_center_top = StackFlat(&quot;sect&quot;);">
          <arg value="stack_edit_center_top" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sect" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="stack_edit_center_top:Orientation = &quot;horizontal&quot;;">
          <arg value="Orientation" con="mem">
            <arg value="stack_edit_center_top" con="var" />
          </arg>
          <arg value="horizontal" con="str" />
        </getres_s>
        <getres_s str="stack_edit_center_top:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="stack_edit_center_top" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="tip_title" str="var tip_title = Tip(&quot;tt&quot;);" />
        <getres_s str="var tip_title = Tip(&quot;tt&quot;);">
          <arg value="tip_title" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tt" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:tip_title = tip_title;">
          <arg value="tip_title" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="tip_title" con="var" />
        </getres_s>
        <getres_s str="tip_title:Text = &quot;title&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip_title" con="var" />
          </arg>
          <arg value="title" con="str" />
        </getres_s>
        <getres_s str="tip_title:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip_title" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip_title:Width = 150;">
          <arg value="Width" con="mem">
            <arg value="tip_title" con="var" />
          </arg>
          <arg value="150" con="num" />
        </getres_s>
        <var_s varname="bu_save" str="var bu_save = Bubble(&quot;bs&quot;);" />
        <getres_s str="var bu_save = Bubble(&quot;bs&quot;);">
          <arg value="bu_save" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bs" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="bu_replace" str="var bu_replace = Bubble(&quot;br&quot;);" />
        <getres_s str="var bu_replace = Bubble(&quot;br&quot;);">
          <arg value="bu_replace" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="br" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="bu_help" str="var bu_help = Bubble(&quot;bh&quot;);" />
        <getres_s str="var bu_help = Bubble(&quot;bh&quot;);">
          <arg value="bu_help" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bh" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="bu_add" str="var bu_add = Bubble(&quot;ba&quot;);" />
        <getres_s str="var bu_add = Bubble(&quot;ba&quot;);">
          <arg value="bu_add" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="ba" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="bu_delete" str="var bu_delete = Bubble(&quot;bd&quot;);" />
        <getres_s str="var bu_delete = Bubble(&quot;bd&quot;);">
          <arg value="bu_delete" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bd" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_add:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_add" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_delete:Foreground =  &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_delete" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_save:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_save" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_help :Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_help" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_replace:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_replace" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_save:Text =&quot;保存&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_save" con="var" />
          </arg>
          <arg value="保存" con="str" />
        </getres_s>
        <getres_s str="bu_replace:Text = &quot;替换&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_replace" con="var" />
          </arg>
          <arg value="替换" con="str" />
        </getres_s>
        <getres_s str="bu_help:Text = &quot;帮助&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_help" con="var" />
          </arg>
          <arg value="帮助" con="str" />
        </getres_s>
        <getres_s str="bu_add :Text = &quot;添加&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_add" con="var" />
          </arg>
          <arg value="添加" con="str" />
        </getres_s>
        <getres_s str="bu_delete:Text = &quot;删除&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_delete" con="var" />
          </arg>
          <arg value="删除" con="str" />
        </getres_s>
        <getres_s str="bu_save:Clickevent = this:Save_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_save" con="var" />
          </arg>
          <arg value="Save_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="bu_add:Clickevent = this:Add_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_add" con="var" />
          </arg>
          <arg value="Add_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="bu_delete:Clickevent = this:Delete_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_delete" con="var" />
          </arg>
          <arg value="Delete_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <usefun_s str="stack_edit_center_top:Add(tip_title);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_center_top" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip_title" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_edit_center_top:Add(bu_save);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_center_top" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_save" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_edit_center_top:Add(bu_replace);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_center_top" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_replace" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_edit_center_top:Add(bu_add);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_center_top" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_add" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_edit_center_top:Add(bu_delete);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_center_top" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_delete" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_edit_center_top:Add(bu_help);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_center_top" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_help" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stack_edit_center:Add(stack_edit_center_top);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_center" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stack_edit_center_top" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="grid_split1" str="var grid_split1 = GridFlat(&quot;gs1&quot;);" />
        <getres_s str="var grid_split1 = GridFlat(&quot;gs1&quot;);">
          <arg value="grid_split1" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="gs1" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_split1:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_split1" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_split1:Height = 1;">
          <arg value="Height" con="mem">
            <arg value="grid_split1" con="var" />
          </arg>
          <arg value="1" con="num" />
        </getres_s>
        <getres_s str="grid_split1:Background = &quot;white&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid_split1" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <usefun_s str="stack_edit_center:Add(grid_split1);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_edit_center" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_split1" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="wv_editer" str="var wv_editer = WebView(&quot;wv_editer&quot;);" />
        <getres_s str="var wv_editer = WebView(&quot;wv_editer&quot;);">
          <arg value="wv_editer" con="var" />
          <arg con="fun">
            <fun>
              <arg value="WebView" con="var" />
            </fun>
            <params>
              <arg value="wv_editer" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="wv_editer:Url = &quot;file://mac/Home/Downloads/codemirror-5.59.1/gasoline/zzzz.html&quot;;">
          <arg value="Url" con="mem">
            <arg value="wv_editer" con="var" />
          </arg>
          <arg value="file://mac/Home/Downloads/codemirror-5.59.1/gasoline/zzzz.html" con="str" />
        </getres_s>
        <getres_s str="wv_editer:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="wv_editer" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="wv_editer:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="wv_editer" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="this:wv_editer = wv_editer;">
          <arg value="wv_editer" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="wv_editer" con="var" />
        </getres_s>
        <getres_s str="wv_editer:Margin = List(0,41,0,0);">
          <arg value="Margin" con="mem">
            <arg value="wv_editer" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="0" con="num" />
              <arg value="41" con="num" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="grid_edit:Add(wv_editer,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_edit" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="wv_editer" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid_edit:Add(stack_edit_right,0,1);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_edit" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stack_edit_right" con="var" />
              <arg value="0" con="num" />
              <arg value="1" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid_edit:Add(stack_edit_center,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_edit" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stack_edit_center" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="stack_build" str="var stack_build = StackFlat(&quot;sb&quot;);" />
        <getres_s str="var stack_build = StackFlat(&quot;sb&quot;);">
          <arg value="stack_build" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sb" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="stack_build:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="stack_build" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <var_s varname="tip_build" str="var tip_build = Tip(&quot;tip_build&quot;);" />
        <getres_s str="var tip_build = Tip(&quot;tip_build&quot;);">
          <arg value="tip_build" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip_build" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip_build:Text = &quot;编译&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip_build" con="var" />
          </arg>
          <arg value="编译" con="str" />
        </getres_s>
        <getres_s str="tip_build:FontSize = 28;">
          <arg value="FontSize" con="mem">
            <arg value="tip_build" con="var" />
          </arg>
          <arg value="28" con="num" />
        </getres_s>
        <getres_s str="tip_build:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip_build" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip_build:Margin = List(20,20,20,20);">
          <arg value="Margin" con="mem">
            <arg value="tip_build" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="20" con="num" />
              <arg value="20" con="num" />
              <arg value="20" con="num" />
              <arg value="20" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip_build:Horizontal = &quot;left&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="tip_build" con="var" />
          </arg>
          <arg value="left" con="str" />
        </getres_s>
        <usefun_s str="stack_build:Add(tip_build);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_build" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip_build" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="grid_split2" str="var grid_split2 = GridFlat(&quot;grid_split2&quot;);" />
        <getres_s str="var grid_split2 = GridFlat(&quot;grid_split2&quot;);">
          <arg value="grid_split2" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="grid_split2" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_split2:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_split2" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_split2:Background = &quot;white&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid_split2" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="grid_split2:Height = 2;">
          <arg value="Height" con="mem">
            <arg value="grid_split2" con="var" />
          </arg>
          <arg value="2" con="num" />
        </getres_s>
        <usefun_s str="stack_build:Add(grid_split2);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_build" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_split2" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="tip_libbuild" str="var tip_libbuild = Tip(&quot;tip_libbuild&quot;);" />
        <getres_s str="var tip_libbuild = Tip(&quot;tip_libbuild&quot;);">
          <arg value="tip_libbuild" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip_libbuild" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip_libbuild:Text = &quot;库编译&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip_libbuild" con="var" />
          </arg>
          <arg value="库编译" con="str" />
        </getres_s>
        <getres_s str="tip_libbuild:Horizontal = &quot;left&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="tip_libbuild" con="var" />
          </arg>
          <arg value="left" con="str" />
        </getres_s>
        <getres_s str="tip_libbuild:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip_libbuild" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip_libbuild:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="tip_libbuild" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="stack_build:Add(tip_libbuild);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_build" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip_libbuild" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="bu_libbuild" str="var bu_libbuild = Bubble(&quot;bu_libbuild&quot;);" />
        <getres_s str="var bu_libbuild = Bubble(&quot;bu_libbuild&quot;);">
          <arg value="bu_libbuild" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bu_libbuild" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_libbuild:Text = &quot;编译&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_libbuild" con="var" />
          </arg>
          <arg value="编译" con="str" />
        </getres_s>
        <getres_s str="bu_libbuild:Clickevent = this:LibBuild_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_libbuild" con="var" />
          </arg>
          <arg value="LibBuild_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="bu_libbuild:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_libbuild" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_libbuild:FontSize = 16;">
          <arg value="FontSize" con="mem">
            <arg value="bu_libbuild" con="var" />
          </arg>
          <arg value="16" con="num" />
        </getres_s>
        <getres_s str="bu_libbuild:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="bu_libbuild" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_libbuild:Horizontal = &quot;left&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="bu_libbuild" con="var" />
          </arg>
          <arg value="left" con="str" />
        </getres_s>
        <usefun_s str="stack_build:Add(bu_libbuild);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_build" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_libbuild" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="grid_split3" str="var grid_split3 = GridFlat(&quot;grid_split3&quot;);" />
        <getres_s str="var grid_split3 = GridFlat(&quot;grid_split3&quot;);">
          <arg value="grid_split3" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="grid_split3" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid_split3:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid_split3" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid_split3:Height = 1;">
          <arg value="Height" con="mem">
            <arg value="grid_split3" con="var" />
          </arg>
          <arg value="1" con="num" />
        </getres_s>
        <getres_s str="grid_split3:Background = &quot;white&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid_split3" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="grid_split3:Margin = List(2,2,2,2);">
          <arg value="Margin" con="mem">
            <arg value="grid_split3" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="2" con="num" />
              <arg value="2" con="num" />
              <arg value="2" con="num" />
              <arg value="2" con="num" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="stack_build:Add(grid_split3);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_build" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_split3" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="tip_platbuild" str="var tip_platbuild = Tip(&quot;tip_platbuild&quot;);" />
        <getres_s str="var tip_platbuild = Tip(&quot;tip_platbuild&quot;);">
          <arg value="tip_platbuild" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="tip_platbuild" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip_platbuild:Text = &quot;平台编译&quot;;">
          <arg value="Text" con="mem">
            <arg value="tip_platbuild" con="var" />
          </arg>
          <arg value="平台编译" con="str" />
        </getres_s>
        <getres_s str="tip_platbuild:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="tip_platbuild" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="tip_platbuild:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="tip_platbuild" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="tip_platbuild:Horizontal = &quot;left&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="tip_platbuild" con="var" />
          </arg>
          <arg value="left" con="str" />
        </getres_s>
        <usefun_s str="stack_build:Add(tip_platbuild);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_build" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="tip_platbuild" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="bu_addplat" str="var bu_addplat = Bubble(&quot;bu_addplat&quot;);" />
        <getres_s str="var bu_addplat = Bubble(&quot;bu_addplat&quot;);">
          <arg value="bu_addplat" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bu_addplat" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_addplat:Text = &quot;添加平台&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_addplat" con="var" />
          </arg>
          <arg value="添加平台" con="str" />
        </getres_s>
        <getres_s str="bu_addplat:Clickevent = this:AddPlatform_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_addplat" con="var" />
          </arg>
          <arg value="AddPlatform_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="bu_addplat:FontSize= 16;">
          <arg value="FontSize" con="mem">
            <arg value="bu_addplat" con="var" />
          </arg>
          <arg value="16" con="num" />
        </getres_s>
        <getres_s str="bu_addplat:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="bu_addplat" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_addplat:Horizontal = &quot;left&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="bu_addplat" con="var" />
          </arg>
          <arg value="left" con="str" />
        </getres_s>
        <getres_s str="bu_addplat:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_addplat" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <usefun_s str="stack_build:Add(bu_addplat);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_build" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_addplat" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="lf_platforms" str="var lf_platforms = ListFlat(&quot;lf_platforms&quot;);" />
        <getres_s str="var lf_platforms = ListFlat(&quot;lf_platforms&quot;);">
          <arg value="lf_platforms" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ListFlat" con="var" />
            </fun>
            <params>
              <arg value="lf_platforms" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="lf_platforms:Margin = List(5,5,5,5);">
          <arg value="Margin" con="mem">
            <arg value="lf_platforms" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
              <arg value="5" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="lf_platforms:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="lf_platforms" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <getres_s str="this:lf_platforms = lf_platforms;">
          <arg value="lf_platforms" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="lf_platforms" con="var" />
        </getres_s>
        <usefun_s str="stack_build:Add(lf_platforms);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_build" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="lf_platforms" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid_build:Add(stack_build,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_build" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stack_build" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="stack_config" str="var stack_config = StackFlat(&quot;sc&quot;);" />
        <getres_s str="var stack_config = StackFlat(&quot;sc&quot;);">
          <arg value="stack_config" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="sc" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="stack_config:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="stack_config" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="stack_config:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="stack_config" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <var_s varname="bu_config_save" str="var bu_config_save = Bubble(&quot;bcs&quot;);" />
        <getres_s str="var bu_config_save = Bubble(&quot;bcs&quot;);">
          <arg value="bu_config_save" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="bcs" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_config_save:Text = &quot;保存&quot;;">
          <arg value="Text" con="mem">
            <arg value="bu_config_save" con="var" />
          </arg>
          <arg value="保存" con="str" />
        </getres_s>
        <getres_s str="bu_config_save:Horizontal = &quot;left&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="bu_config_save" con="var" />
          </arg>
          <arg value="left" con="str" />
        </getres_s>
        <getres_s str="bu_config_save:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="bu_config_save" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="bu_config_save:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="bu_config_save" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="bu_config_save:FontSize = 28;">
          <arg value="FontSize" con="mem">
            <arg value="bu_config_save" con="var" />
          </arg>
          <arg value="28" con="num" />
        </getres_s>
        <getres_s str="bu_config_save:Clickevent = this:ConfigSave_Click;">
          <arg value="Clickevent" con="mem">
            <arg value="bu_config_save" con="var" />
          </arg>
          <arg value="ConfigSave_Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <usefun_s str="stack_config:Add(bu_config_save);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_config" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="bu_config_save" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="lf_config" str="var lf_config = ListFlat(&quot;lfcon&quot;);" />
        <getres_s str="var lf_config = ListFlat(&quot;lfcon&quot;);">
          <arg value="lf_config" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ListFlat" con="var" />
            </fun>
            <params>
              <arg value="lfcon" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="lf_config:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="lf_config" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <getres_s str="lf_config:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="lf_config" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="this:lf_config = lf_config;">
          <arg value="lf_config" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="lf_config" con="var" />
        </getres_s>
        <getres_s str="this:ls_config = List();">
          <arg value="ls_config" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params />
          </arg>
        </getres_s>
        <usefun_s str="stack_config:Add(lf_config);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="stack_config" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="lf_config" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid_config:Add(stack_config,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_config" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stack_config" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="lf_settings" str="var lf_settings = ListFlat(&quot;lfs&quot;);" />
        <getres_s str="var lf_settings = ListFlat(&quot;lfs&quot;);">
          <arg value="lf_settings" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ListFlat" con="var" />
            </fun>
            <params>
              <arg value="lfs" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="lf_settings:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="lf_settings" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="lf_settings:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="lf_settings" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <var_s varname="cell_donate" str="var cell_donate = TextCell(&quot;cd&quot;);" />
        <getres_s str="var cell_donate = TextCell(&quot;cd&quot;);">
          <arg value="cell_donate" con="var" />
          <arg con="fun">
            <fun>
              <arg value="TextCell" con="var" />
            </fun>
            <params>
              <arg value="cd" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="cell_donate:Text = &quot;捐赠&quot;;">
          <arg value="Text" con="mem">
            <arg value="cell_donate" con="var" />
          </arg>
          <arg value="捐赠" con="str" />
        </getres_s>
        <getres_s str="cell_donate:Detail = &quot;欢迎您的赞助哦,联系作者:qq:2914543921;Email:lzm021005@outlook.com&quot;;">
          <arg value="Detail" con="mem">
            <arg value="cell_donate" con="var" />
          </arg>
          <arg value="欢迎您的赞助哦,联系作者:qq:2914543921;Email:lzm021005@outlook.com" con="str" />
        </getres_s>
        <getres_s str="cell_donate:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="cell_donate" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="cell_donate:DetailColor = &quot;white&quot;;">
          <arg value="DetailColor" con="mem">
            <arg value="cell_donate" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <var_s varname="cell_about" str="var cell_about = TextCell(&quot;ca&quot;);" />
        <getres_s str="var cell_about = TextCell(&quot;ca&quot;);">
          <arg value="cell_about" con="var" />
          <arg con="fun">
            <fun>
              <arg value="TextCell" con="var" />
            </fun>
            <params>
              <arg value="ca" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="cell_about:Text = &quot;关于&quot;;">
          <arg value="Text" con="mem">
            <arg value="cell_about" con="var" />
          </arg>
          <arg value="关于" con="str" />
        </getres_s>
        <getres_s str="cell_about:Detail = &quot;version 1.0&quot;;">
          <arg value="Detail" con="mem">
            <arg value="cell_about" con="var" />
          </arg>
          <arg value="version 1.0" con="str" />
        </getres_s>
        <getres_s str="cell_about:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="cell_about" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="cell_about:DetailColor = &quot;white&quot;;">
          <arg value="DetailColor" con="mem">
            <arg value="cell_about" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <usefun_s str="lf_settings:Add(cell_donate);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="lf_settings" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="cell_donate" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="lf_settings:Add(cell_about);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="lf_settings" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="cell_about" con="var" />
            </params>
          </arg>
        </usefun_s>
        <getres_s str="lf_settings:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="lf_settings" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <usefun_s str="grid_settings:Add(lf_settings,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid_settings" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="lf_settings" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="maingrid:Add(stack_left,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="maingrid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stack_left" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="maingrid:Add(stack_bottom,1,1);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="maingrid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stack_bottom" con="var" />
              <arg value="1" con="num" />
              <arg value="1" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="maingrid:Add(grid_content,0,1);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="maingrid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid_content" con="var" />
              <arg value="0" con="num" />
              <arg value="1" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:SetContent(maingrid);">
          <arg con="fun">
            <fun>
              <arg value="SetContent" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="maingrid" con="var" />
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="Edit_Click" params="p,e" isref="False" isstatic="False">
        <usefun_s str="this:HideAll();">
          <arg con="fun">
            <fun>
              <arg value="HideAll" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <getres_s str="this:grid_edit:Visibility = &quot;visible&quot;;">
          <arg value="Visibility" con="mem">
            <arg value="grid_edit" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="visible" con="str" />
        </getres_s>
      </memfun>
      <memfun funname="Config_Click" params="p,e" isref="False" isstatic="False">
        <usefun_s str="this:HideAll();">
          <arg con="fun">
            <fun>
              <arg value="HideAll" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <getres_s str="this:grid_config:Visibility = &quot;visible&quot;;">
          <arg value="Visibility" con="mem">
            <arg value="grid_config" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="visible" con="str" />
        </getres_s>
      </memfun>
      <memfun funname="Build_Click" params="p,e" isref="False" isstatic="False">
        <usefun_s str="this:HideAll();">
          <arg con="fun">
            <fun>
              <arg value="HideAll" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <getres_s str="this:grid_build:Visibility = &quot;visible&quot;;">
          <arg value="Visibility" con="mem">
            <arg value="grid_build" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="visible" con="str" />
        </getres_s>
      </memfun>
      <memfun funname="Settings_Click" params="p,e" isref="False" isstatic="False">
        <usefun_s str="this:HideAll();">
          <arg con="fun">
            <fun>
              <arg value="HideAll" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <getres_s str="this:grid_settings:Visibility = &quot;visible&quot;;">
          <arg value="Visibility" con="mem">
            <arg value="grid_settings" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="visible" con="str" />
        </getres_s>
      </memfun>
      <memfun funname="HideAll" params="" isref="False" isstatic="False">
        <getres_s str="this:grid_build:Visibility = &quot;gone&quot;;">
          <arg value="Visibility" con="mem">
            <arg value="grid_build" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="gone" con="str" />
        </getres_s>
        <getres_s str="this:grid_config:Visibility = &quot;gone&quot;;">
          <arg value="Visibility" con="mem">
            <arg value="grid_config" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="gone" con="str" />
        </getres_s>
        <getres_s str="this:grid_edit:Visibility = &quot;gone&quot;;">
          <arg value="Visibility" con="mem">
            <arg value="grid_edit" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="gone" con="str" />
        </getres_s>
        <getres_s str="this:grid_settings:Visibility = &quot;gone&quot;;">
          <arg value="Visibility" con="mem">
            <arg value="grid_settings" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="gone" con="str" />
        </getres_s>
      </memfun>
      <memfun funname="Refreshcodeslist" params="" isref="False" isstatic="False">
        <usefun_s str="this:lf_codes:Clear();">
          <arg con="fun">
            <fun>
              <arg value="Clear" con="mem">
                <arg value="lf_codes" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i ,Range(0,this:ls_codes:GetLength())):">
          <from>
            <arg con="fun">
              <fun>
                <arg value="Range" con="var" />
              </fun>
              <params>
                <arg value="0" con="num" />
                <arg con="fun">
                  <fun>
                    <arg value="GetLength" con="mem">
                      <arg value="ls_codes" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </arg>
                  </fun>
                  <params />
                </arg>
              </params>
            </arg>
          </from>
          <run>
            <var_s varname="cell" str="var cell = TextCell(&quot;tc&quot;&amp;i);" />
            <getres_s str="var cell = TextCell(&quot;tc&quot;&amp;i);">
              <arg value="cell" con="var" />
              <arg con="fun">
                <fun>
                  <arg value="TextCell" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="tc" con="str" />
                      <arg value="i" con="var" />
                    </params>
                  </arg>
                </params>
              </arg>
            </getres_s>
            <getres_s str="cell:Text = this:ls_codes(i);">
              <arg value="Text" con="mem">
                <arg value="cell" con="var" />
              </arg>
              <arg con="fun">
                <fun>
                  <arg value="ls_codes" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="i" con="var" />
                </params>
              </arg>
            </getres_s>
            <getres_s str="cell:Foreground = &quot;white&quot;;">
              <arg value="Foreground" con="mem">
                <arg value="cell" con="var" />
              </arg>
              <arg value="white" con="str" />
            </getres_s>
            <getres_s str="cell:Clickevent = this:CodeCell_Click;">
              <arg value="Clickevent" con="mem">
                <arg value="cell" con="var" />
              </arg>
              <arg value="CodeCell_Click" con="mem">
                <arg value="this" con="var" />
              </arg>
            </getres_s>
            <usefun_s str="this:lf_codes:Add(cell);">
              <arg con="fun">
                <fun>
                  <arg value="Add" con="mem">
                    <arg value="lf_codes" con="mem">
                      <arg value="this" con="var" />
                    </arg>
                  </arg>
                </fun>
                <params>
                  <arg value="cell" con="var" />
                </params>
              </arg>
            </usefun_s>
          </run>
        </foreach_s>
      </memfun>
      <memfun funname="Refreshplatformlist" params="xml_gac" isref="False" isstatic="False">
        <usefun_s str="this:lf_platforms:Clear();">
          <arg con="fun">
            <fun>
              <arg value="Clear" con="mem">
                <arg value="lf_platforms" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <var_s varname="ele_gca" str="var ele_gca = xml_gac:Content;" />
        <getres_s str="var ele_gca = xml_gac:Content;">
          <arg value="ele_gca" con="var" />
          <arg value="Content" con="mem">
            <arg value="xml_gac" con="var" />
          </arg>
        </getres_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i ,Range(0,ele_gca:GetChild(3):Count)):">
          <from>
            <arg con="fun">
              <fun>
                <arg value="Range" con="var" />
              </fun>
              <params>
                <arg value="0" con="num" />
                <arg value="Count" con="mem">
                  <arg con="fun">
                    <fun>
                      <arg value="GetChild" con="mem">
                        <arg value="ele_gca" con="var" />
                      </arg>
                    </fun>
                    <params>
                      <arg value="3" con="num" />
                    </params>
                  </arg>
                </arg>
              </params>
            </arg>
          </from>
          <run>
            <var_s varname="ele_platform" str="var ele_platform = ele_gca:GetChild(3):GetChild(i);" />
            <getres_s str="var ele_platform = ele_gca:GetChild(3):GetChild(i);">
              <arg value="ele_platform" con="var" />
              <arg con="fun">
                <fun>
                  <arg value="GetChild" con="mem">
                    <arg con="fun">
                      <fun>
                        <arg value="GetChild" con="mem">
                          <arg value="ele_gca" con="var" />
                        </arg>
                      </fun>
                      <params>
                        <arg value="3" con="num" />
                      </params>
                    </arg>
                  </arg>
                </fun>
                <params>
                  <arg value="i" con="var" />
                </params>
              </arg>
            </getres_s>
            <if_s str="if(ele_platform:GetAttribute(&quot;id&quot;) &amp;= &quot;GTWPF&quot;):">
              <then>
                <express>
                  <arg con="fun">
                    <fun>
                      <arg value="StringIsEqual" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="GetAttribute" con="mem">
                            <arg value="ele_platform" con="var" />
                          </arg>
                        </fun>
                        <params>
                          <arg value="id" con="str" />
                        </params>
                      </arg>
                      <arg value="GTWPF" con="str" />
                    </params>
                  </arg>
                </express>
                <run>
                  <var_s varname="wpfbuilder" str="var wpfbuilder = GTWPFBuilder(ele_platform:GetAttribute(&quot;sourcepath&quot;),ele_platform:GetAttribute(&quot;buildpath&quot;),this:gca_name,this:ls_dependences,this:gca_path,this:gaa_buildpath,this:LibBuild_Click);" />
                  <getres_s str="var wpfbuilder = GTWPFBuilder(ele_platform:GetAttribute(&quot;sourcepath&quot;),ele_platform:GetAttribute(&quot;buildpath&quot;),this:gca_name,this:ls_dependences,this:gca_path,this:gaa_buildpath,this:LibBuild_Click);">
                    <arg value="wpfbuilder" con="var" />
                    <arg con="fun">
                      <fun>
                        <arg value="GTWPFBuilder" con="var" />
                      </fun>
                      <params>
                        <arg con="fun">
                          <fun>
                            <arg value="GetAttribute" con="mem">
                              <arg value="ele_platform" con="var" />
                            </arg>
                          </fun>
                          <params>
                            <arg value="sourcepath" con="str" />
                          </params>
                        </arg>
                        <arg con="fun">
                          <fun>
                            <arg value="GetAttribute" con="mem">
                              <arg value="ele_platform" con="var" />
                            </arg>
                          </fun>
                          <params>
                            <arg value="buildpath" con="str" />
                          </params>
                        </arg>
                        <arg value="gca_name" con="mem">
                          <arg value="this" con="var" />
                        </arg>
                        <arg value="ls_dependences" con="mem">
                          <arg value="this" con="var" />
                        </arg>
                        <arg value="gca_path" con="mem">
                          <arg value="this" con="var" />
                        </arg>
                        <arg value="gaa_buildpath" con="mem">
                          <arg value="this" con="var" />
                        </arg>
                        <arg value="LibBuild_Click" con="mem">
                          <arg value="this" con="var" />
                        </arg>
                      </params>
                    </arg>
                  </getres_s>
                  <usefun_s str="this:ls_platforms:Add(wpfbuilder);">
                    <arg con="fun">
                      <fun>
                        <arg value="Add" con="mem">
                          <arg value="ls_platforms" con="mem">
                            <arg value="this" con="var" />
                          </arg>
                        </arg>
                      </fun>
                      <params>
                        <arg value="wpfbuilder" con="var" />
                      </params>
                    </arg>
                  </usefun_s>
                  <var_s varname="cell" str="var cell = TextCell(&quot;wpfbuildcell&quot;);" />
                  <getres_s str="var cell = TextCell(&quot;wpfbuildcell&quot;);">
                    <arg value="cell" con="var" />
                    <arg con="fun">
                      <fun>
                        <arg value="TextCell" con="var" />
                      </fun>
                      <params>
                        <arg value="wpfbuildcell" con="str" />
                      </params>
                    </arg>
                  </getres_s>
                  <getres_s str="cell:Text = &quot;Windows&quot;;">
                    <arg value="Text" con="mem">
                      <arg value="cell" con="var" />
                    </arg>
                    <arg value="Windows" con="str" />
                  </getres_s>
                  <getres_s str="cell:Foreground = &quot;white&quot;;">
                    <arg value="Foreground" con="mem">
                      <arg value="cell" con="var" />
                    </arg>
                    <arg value="white" con="str" />
                  </getres_s>
                  <getres_s str="cell:DetailColor = &quot;white&quot;;">
                    <arg value="DetailColor" con="mem">
                      <arg value="cell" con="var" />
                    </arg>
                    <arg value="white" con="str" />
                  </getres_s>
                  <getres_s str="cell:Detail = &quot;.Net Core;x86;WPF Framework&quot;;">
                    <arg value="Detail" con="mem">
                      <arg value="cell" con="var" />
                    </arg>
                    <arg value=".Net Core;x86;WPF Framework" con="str" />
                  </getres_s>
                  <getres_s str="cell:Clickevent = wpfbuilder:Build;">
                    <arg value="Clickevent" con="mem">
                      <arg value="cell" con="var" />
                    </arg>
                    <arg value="Build" con="mem">
                      <arg value="wpfbuilder" con="var" />
                    </arg>
                  </getres_s>
                  <usefun_s str="this:lf_platforms:Add(cell);">
                    <arg con="fun">
                      <fun>
                        <arg value="Add" con="mem">
                          <arg value="lf_platforms" con="mem">
                            <arg value="this" con="var" />
                          </arg>
                        </arg>
                      </fun>
                      <params>
                        <arg value="cell" con="var" />
                      </params>
                    </arg>
                  </usefun_s>
                </run>
              </then>
            </if_s>
          </run>
        </foreach_s>
      </memfun>
      <memfun funname="Loadconfig" params="" isref="False" isstatic="False">
        <var_s varname="version" str="var version = ConfigCell(&quot;vcc&quot;);" />
        <getres_s str="var version = ConfigCell(&quot;vcc&quot;);">
          <arg value="version" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ConfigCell" con="var" />
            </fun>
            <params>
              <arg value="vcc" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="id" str="var id = ConfigCell(&quot;icc&quot;);" />
        <getres_s str="var id = ConfigCell(&quot;icc&quot;);">
          <arg value="id" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ConfigCell" con="var" />
            </fun>
            <params>
              <arg value="icc" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="writer" str="var writer = ConfigCell(&quot;wcc&quot;);" />
        <getres_s str="var writer = ConfigCell(&quot;wcc&quot;);">
          <arg value="writer" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ConfigCell" con="var" />
            </fun>
            <params>
              <arg value="wcc" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="hlink" str="var hlink = ConfigCell(&quot;hcc&quot;);" />
        <getres_s str="var hlink = ConfigCell(&quot;hcc&quot;);">
          <arg value="hlink" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ConfigCell" con="var" />
            </fun>
            <params>
              <arg value="hcc" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="deps" str="var deps = ConfigCell(&quot;dcc&quot;);" />
        <getres_s str="var deps = ConfigCell(&quot;dcc&quot;);">
          <arg value="deps" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ConfigCell" con="var" />
            </fun>
            <params>
              <arg value="dcc" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="version:Text = &quot;version&quot;;">
          <arg value="Text" con="mem">
            <arg value="version" con="var" />
          </arg>
          <arg value="version" con="str" />
        </getres_s>
        <getres_s str="id:Text = &quot;id&quot;;">
          <arg value="Text" con="mem">
            <arg value="id" con="var" />
          </arg>
          <arg value="id" con="str" />
        </getres_s>
        <getres_s str="writer:Text = &quot;writer&quot;;">
          <arg value="Text" con="mem">
            <arg value="writer" con="var" />
          </arg>
          <arg value="writer" con="str" />
        </getres_s>
        <getres_s str="hlink:Text = &quot;helplink&quot;;">
          <arg value="Text" con="mem">
            <arg value="hlink" con="var" />
          </arg>
          <arg value="helplink" con="str" />
        </getres_s>
        <getres_s str="deps:Text =&quot;依赖项（用;分割开）&quot;;">
          <arg value="Text" con="mem">
            <arg value="deps" con="var" />
          </arg>
          <arg value="依赖项（用;分割开）" con="str" />
        </getres_s>
        <getres_s str="version:Detail = this:gca_version;">
          <arg value="Detail" con="mem">
            <arg value="version" con="var" />
          </arg>
          <arg value="gca_version" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="id:Detail = this:gca_id;">
          <arg value="Detail" con="mem">
            <arg value="id" con="var" />
          </arg>
          <arg value="gca_id" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="writer:Detail = this:gca_writer;">
          <arg value="Detail" con="mem">
            <arg value="writer" con="var" />
          </arg>
          <arg value="gca_writer" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="hlink:Detail = this:gca_helplink;">
          <arg value="Detail" con="mem">
            <arg value="hlink" con="var" />
          </arg>
          <arg value="gca_helplink" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <var_s varname="dep" str="var dep = &quot;&quot;;" />
        <getres_s str="var dep = &quot;&quot;;">
          <arg value="dep" con="var" />
          <arg value="" con="str" />
        </getres_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i , this:ls_dependences):">
          <from>
            <arg value="ls_dependences" con="mem">
              <arg value="this" con="var" />
            </arg>
          </from>
          <run>
            <getres_s str="dep = dep&amp;i&amp;&quot;;&quot;;">
              <arg value="dep" con="var" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="dep" con="var" />
                      <arg value="i" con="var" />
                    </params>
                  </arg>
                  <arg value=";" con="str" />
                </params>
              </arg>
            </getres_s>
          </run>
        </foreach_s>
        <getres_s str="deps:Detail = dep;">
          <arg value="Detail" con="mem">
            <arg value="deps" con="var" />
          </arg>
          <arg value="dep" con="var" />
        </getres_s>
        <usefun_s str="this:ls_config:Add(version);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="ls_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="version" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:ls_config:Add(id);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="ls_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="id" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:ls_config:Add(writer);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="ls_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="writer" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:ls_config:Add(hlink);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="ls_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="hlink" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:ls_config:Add(deps);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="ls_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="deps" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:lf_config:Add(version);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="lf_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="version" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:lf_config:Add(id);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="lf_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="id" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:lf_config:Add(writer);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="lf_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="writer" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:lf_config:Add(hlink);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="lf_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="hlink" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:lf_config:Add(deps);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="lf_config" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="deps" con="var" />
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="OpenCode" params="codename" isref="False" isstatic="False">
        <getres_s str="this:tip_title:Text = codename;">
          <arg value="Text" con="mem">
            <arg value="tip_title" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="codename" con="var" />
        </getres_s>
        <var_s varname="stream" str="var stream = FileOpen(this:gca_path&amp;codename,&quot;open&quot;);" />
        <getres_s str="var stream = FileOpen(this:gca_path&amp;codename,&quot;open&quot;);">
          <arg value="stream" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="gca_path" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                  <arg value="codename" con="var" />
                </params>
              </arg>
              <arg value="open" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="code" str="var code = stream:ReadText();" />
        <getres_s str="var code = stream:ReadText();">
          <arg value="code" con="var" />
          <arg con="fun">
            <fun>
              <arg value="ReadText" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </getres_s>
        <usefun_s str="stream:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <usefun_s str="this:wv_editer:InvokeJS(&quot;setValue&quot;,code);">
          <arg con="fun">
            <fun>
              <arg value="InvokeJS" con="mem">
                <arg value="wv_editer" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="setValue" con="str" />
              <arg value="code" con="var" />
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="SaveCode" params="" isref="False" isstatic="False">
        <var_s varname="codename" str="var codename = this:tip_title:Text;" />
        <getres_s str="var codename = this:tip_title:Text;">
          <arg value="codename" con="var" />
          <arg value="Text" con="mem">
            <arg value="tip_title" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
        </getres_s>
        <var_s varname="code" str="var code = this:wv_editer:InvokeJS(&quot;getValue&quot;);" />
        <getres_s str="var code = this:wv_editer:InvokeJS(&quot;getValue&quot;);">
          <arg value="code" con="var" />
          <arg con="fun">
            <fun>
              <arg value="InvokeJS" con="mem">
                <arg value="wv_editer" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="getValue" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="stream" str="var stream = FileOpen(this:gca_path&amp;codename,&quot;creat&quot;);" />
        <getres_s str="var stream = FileOpen(this:gca_path&amp;codename,&quot;creat&quot;);">
          <arg value="stream" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="gca_path" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                  <arg value="codename" con="var" />
                </params>
              </arg>
              <arg value="creat" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="stream:WriteText(code);">
          <arg con="fun">
            <fun>
              <arg value="WriteText" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="code" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stream:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <usefun_s str="this:Record(&quot;[+] &quot;&amp;codename&amp;&quot; 保存成功。&quot;);">
          <arg con="fun">
            <fun>
              <arg value="Record" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="[+] " con="str" />
                      <arg value="codename" con="var" />
                    </params>
                  </arg>
                  <arg value=" 保存成功。" con="str" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="CodeCell_Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="code" str="var code = e(0):Text;" />
        <getres_s str="var code = e(0):Text;">
          <arg value="code" con="var" />
          <arg value="Text" con="mem">
            <arg con="fun">
              <fun>
                <arg value="e" con="var" />
              </fun>
              <params>
                <arg value="0" con="num" />
              </params>
            </arg>
          </arg>
        </getres_s>
        <if_s str="if(!(this:tip_title:Text &amp;= code)):">
          <then>
            <express>
              <arg con="fun">
                <fun>
                  <arg value="Not" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringIsEqual" con="var" />
                    </fun>
                    <params>
                      <arg value="Text" con="mem">
                        <arg value="tip_title" con="mem">
                          <arg value="this" con="var" />
                        </arg>
                      </arg>
                      <arg value="code" con="var" />
                    </params>
                  </arg>
                </params>
              </arg>
            </express>
            <run>
              <usefun_s str="this:SaveCode();">
                <arg con="fun">
                  <fun>
                    <arg value="SaveCode" con="mem">
                      <arg value="this" con="var" />
                    </arg>
                  </fun>
                  <params />
                </arg>
              </usefun_s>
              <usefun_s str="this:OpenCode(code);">
                <arg con="fun">
                  <fun>
                    <arg value="OpenCode" con="mem">
                      <arg value="this" con="var" />
                    </arg>
                  </fun>
                  <params>
                    <arg value="code" con="var" />
                  </params>
                </arg>
              </usefun_s>
            </run>
          </then>
        </if_s>
      </memfun>
      <memfun funname="Save_Click" params="p,e" isref="False" isstatic="False">
        <usefun_s str="this:SaveCode();">
          <arg con="fun">
            <fun>
              <arg value="SaveCode" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="Add_Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="name" str="var name = Input(&quot;&quot;,&quot;请输入文件名称&quot;);" />
        <getres_s str="var name = Input(&quot;&quot;,&quot;请输入文件名称&quot;);">
          <arg value="name" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Input" con="var" />
            </fun>
            <params>
              <arg value="" con="str" />
              <arg value="请输入文件名称" con="str" />
            </params>
          </arg>
        </getres_s>
        <if_s str="if(!(name &amp;= &quot;&quot;)):">
          <then>
            <express>
              <arg con="fun">
                <fun>
                  <arg value="Not" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringIsEqual" con="var" />
                    </fun>
                    <params>
                      <arg value="name" con="var" />
                      <arg value="" con="str" />
                    </params>
                  </arg>
                </params>
              </arg>
            </express>
            <run>
              <var_s varname="cell" str="var cell = TextCell(&quot;cell&quot;&amp;Random(0,100000));" />
              <getres_s str="var cell = TextCell(&quot;cell&quot;&amp;Random(0,100000));">
                <arg value="cell" con="var" />
                <arg con="fun">
                  <fun>
                    <arg value="TextCell" con="var" />
                  </fun>
                  <params>
                    <arg con="fun">
                      <fun>
                        <arg value="StringAdd" con="var" />
                      </fun>
                      <params>
                        <arg value="cell" con="str" />
                        <arg con="fun">
                          <fun>
                            <arg value="Random" con="var" />
                          </fun>
                          <params>
                            <arg value="0" con="num" />
                            <arg value="100000" con="num" />
                          </params>
                        </arg>
                      </params>
                    </arg>
                  </params>
                </arg>
              </getres_s>
              <getres_s str="cell:Text = name;">
                <arg value="Text" con="mem">
                  <arg value="cell" con="var" />
                </arg>
                <arg value="name" con="var" />
              </getres_s>
              <getres_s str="cell:Foreground = &quot;white&quot;;">
                <arg value="Foreground" con="mem">
                  <arg value="cell" con="var" />
                </arg>
                <arg value="white" con="str" />
              </getres_s>
              <getres_s str="cell:Clickevent = this:CodeCell_Click;">
                <arg value="Clickevent" con="mem">
                  <arg value="cell" con="var" />
                </arg>
                <arg value="CodeCell_Click" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </getres_s>
              <usefun_s str="this:lf_codes:Add(cell);">
                <arg con="fun">
                  <fun>
                    <arg value="Add" con="mem">
                      <arg value="lf_codes" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </arg>
                  </fun>
                  <params>
                    <arg value="cell" con="var" />
                  </params>
                </arg>
              </usefun_s>
              <usefun_s str="FileOpen(this:gca_path&amp;name,&quot;creat&quot;):Close();">
                <arg con="fun">
                  <fun>
                    <arg value="Close" con="mem">
                      <arg con="fun">
                        <fun>
                          <arg value="FileOpen" con="var" />
                        </fun>
                        <params>
                          <arg con="fun">
                            <fun>
                              <arg value="StringAdd" con="var" />
                            </fun>
                            <params>
                              <arg value="gca_path" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                              <arg value="name" con="var" />
                            </params>
                          </arg>
                          <arg value="creat" con="str" />
                        </params>
                      </arg>
                    </arg>
                  </fun>
                  <params />
                </arg>
              </usefun_s>
              <var_s varname="ele" str="var ele = sta_xml_gca:Content:GetChild(0);" />
              <getres_s str="var ele = sta_xml_gca:Content:GetChild(0);">
                <arg value="ele" con="var" />
                <arg con="fun">
                  <fun>
                    <arg value="GetChild" con="mem">
                      <arg value="Content" con="mem">
                        <arg value="sta_xml_gca" con="var" />
                      </arg>
                    </arg>
                  </fun>
                  <params>
                    <arg value="0" con="num" />
                  </params>
                </arg>
              </getres_s>
              <var_s varname="nele" str="var nele = sta_xml_gca:CreatElement(&quot;code&quot;);" />
              <getres_s str="var nele = sta_xml_gca:CreatElement(&quot;code&quot;);">
                <arg value="nele" con="var" />
                <arg con="fun">
                  <fun>
                    <arg value="CreatElement" con="mem">
                      <arg value="sta_xml_gca" con="var" />
                    </arg>
                  </fun>
                  <params>
                    <arg value="code" con="str" />
                  </params>
                </arg>
              </getres_s>
              <usefun_s str="nele:SetAttribute(&quot;path&quot;,name);">
                <arg con="fun">
                  <fun>
                    <arg value="SetAttribute" con="mem">
                      <arg value="nele" con="var" />
                    </arg>
                  </fun>
                  <params>
                    <arg value="path" con="str" />
                    <arg value="name" con="var" />
                  </params>
                </arg>
              </usefun_s>
              <usefun_s str="ele:AddChild(nele);">
                <arg con="fun">
                  <fun>
                    <arg value="AddChild" con="mem">
                      <arg value="ele" con="var" />
                    </arg>
                  </fun>
                  <params>
                    <arg value="nele" con="var" />
                  </params>
                </arg>
              </usefun_s>
              <usefun_s str="this:ls_codes:Add(name);">
                <arg con="fun">
                  <fun>
                    <arg value="Add" con="mem">
                      <arg value="ls_codes" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </arg>
                  </fun>
                  <params>
                    <arg value="name" con="var" />
                  </params>
                </arg>
              </usefun_s>
              <usefun_s str="this:SaveXml();">
                <arg con="fun">
                  <fun>
                    <arg value="SaveXml" con="mem">
                      <arg value="this" con="var" />
                    </arg>
                  </fun>
                  <params />
                </arg>
              </usefun_s>
            </run>
          </then>
        </if_s>
      </memfun>
      <memfun funname="Delete_Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="name" str="var name = this:tip_title:Text;" />
        <getres_s str="var name = this:tip_title:Text;">
          <arg value="name" con="var" />
          <arg value="Text" con="mem">
            <arg value="tip_title" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
        </getres_s>
        <usefun_s str="this:ls_codes:Remove(name);">
          <arg con="fun">
            <fun>
              <arg value="Remove" con="mem">
                <arg value="ls_codes" con="mem">
                  <arg value="this" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="name" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:Refreshcodeslist();">
          <arg con="fun">
            <fun>
              <arg value="Refreshcodeslist" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <var_s varname="ele" str="var ele = sta_xml_gca:Content:GetChild(0);" />
        <getres_s str="var ele = sta_xml_gca:Content:GetChild(0);">
          <arg value="ele" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GetChild" con="mem">
                <arg value="Content" con="mem">
                  <arg value="sta_xml_gca" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="0" con="num" />
            </params>
          </arg>
        </getres_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i,Range(0,ele:Count)):">
          <from>
            <arg con="fun">
              <fun>
                <arg value="Range" con="var" />
              </fun>
              <params>
                <arg value="0" con="num" />
                <arg value="Count" con="mem">
                  <arg value="ele" con="var" />
                </arg>
              </params>
            </arg>
          </from>
          <run>
            <if_s str="if( ele:GetChild(i):GetAttribute(&quot;path&quot;) &amp;= name ):">
              <then>
                <express>
                  <arg con="fun">
                    <fun>
                      <arg value="StringIsEqual" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="GetAttribute" con="mem">
                            <arg con="fun">
                              <fun>
                                <arg value="GetChild" con="mem">
                                  <arg value="ele" con="var" />
                                </arg>
                              </fun>
                              <params>
                                <arg value="i" con="var" />
                              </params>
                            </arg>
                          </arg>
                        </fun>
                        <params>
                          <arg value="path" con="str" />
                        </params>
                      </arg>
                      <arg value="name" con="var" />
                    </params>
                  </arg>
                </express>
                <run>
                  <usefun_s str="ele:RemoveChild(ele:GetChild(i));">
                    <arg con="fun">
                      <fun>
                        <arg value="RemoveChild" con="mem">
                          <arg value="ele" con="var" />
                        </arg>
                      </fun>
                      <params>
                        <arg con="fun">
                          <fun>
                            <arg value="GetChild" con="mem">
                              <arg value="ele" con="var" />
                            </arg>
                          </fun>
                          <params>
                            <arg value="i" con="var" />
                          </params>
                        </arg>
                      </params>
                    </arg>
                  </usefun_s>
                </run>
              </then>
            </if_s>
          </run>
        </foreach_s>
        <usefun_s str="this:SaveXml();">
          <arg con="fun">
            <fun>
              <arg value="SaveXml" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <usefun_s str="FileDelete(this:gca_path&amp;name);">
          <arg con="fun">
            <fun>
              <arg value="FileDelete" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="gca_path" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                  <arg value="name" con="var" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:Record(&quot;[+] 成功删除 &quot;&amp;name);">
          <arg con="fun">
            <fun>
              <arg value="Record" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="[+] 成功删除 " con="str" />
                  <arg value="name" con="var" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="LibBuild_Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="gascpath" str="var gascpath = &quot;tools\\gasc\\gasc.exe&quot;;" />
        <getres_s str="var gascpath = &quot;tools\\gasc\\gasc.exe&quot;;">
          <arg value="gascpath" con="var" />
          <arg value="tools\gasc\gasc.exe" con="str" />
        </getres_s>
        <var_s varname="codes" str="var codes = &quot;&quot;,deps = &quot;&quot;;" />
        <getres_s str="var codes = &quot;&quot;,deps = &quot;&quot;;">
          <arg value="codes" con="var" />
          <arg value="" con="str" />
        </getres_s>
        <var_s varname="deps" str="var codes = &quot;&quot;,deps = &quot;&quot;;" />
        <getres_s str="var codes = &quot;&quot;,deps = &quot;&quot;;">
          <arg value="deps" con="var" />
          <arg value="" con="str" />
        </getres_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i,this:ls_codes):">
          <from>
            <arg value="ls_codes" con="mem">
              <arg value="this" con="var" />
            </arg>
          </from>
          <run>
            <getres_s str="codes = codes&amp;&quot; &quot;&amp;this:gca_path&amp;i;">
              <arg value="codes" con="var" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg value="codes" con="var" />
                          <arg value=" " con="str" />
                        </params>
                      </arg>
                      <arg value="gca_path" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value="i" con="var" />
                </params>
              </arg>
            </getres_s>
          </run>
        </foreach_s>
        <var_s varname="dep" str="var dep;" />
        <if_s str="if(this:ls_dependences:GetLength() == 0):">
          <then>
            <express>
              <arg con="fun">
                <fun>
                  <arg value="Equal" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="GetLength" con="mem">
                        <arg value="ls_dependences" con="mem">
                          <arg value="this" con="var" />
                        </arg>
                      </arg>
                    </fun>
                    <params />
                  </arg>
                  <arg value="0" con="num" />
                </params>
              </arg>
            </express>
            <run>
              <getres_s str="dep = &quot;&quot;;">
                <arg value="dep" con="var" />
                <arg value="" con="str" />
              </getres_s>
            </run>
          </then>
          <else>
            <run>
              <getres_s str="dep = &quot;--dep&quot;;">
                <arg value="dep" con="var" />
                <arg value="--dep" con="str" />
              </getres_s>
            </run>
          </else>
        </if_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i,this:ls_dependences):">
          <from>
            <arg value="ls_dependences" con="mem">
              <arg value="this" con="var" />
            </arg>
          </from>
          <run>
            <getres_s str="deps = deps&amp;&quot; &quot;&amp;i ;">
              <arg value="deps" con="var" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="deps" con="var" />
                      <arg value=" " con="str" />
                    </params>
                  </arg>
                  <arg value="i" con="var" />
                </params>
              </arg>
            </getres_s>
          </run>
        </foreach_s>
        <usefun_s str="this:Record(&quot;[+] gaa库编译中&quot;);">
          <arg con="fun">
            <fun>
              <arg value="Record" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="[+] gaa库编译中" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="Shell(gascpath,&quot;--name&quot;,this:gca_name,&quot;--targetpath&quot;,this:gca_path&amp;this:gaa_sourcepath,&quot;--version&quot;,this:gca_version,&quot;--id&quot;,this:gca_id,&quot;--code&quot;,codes,dep,deps);">
          <arg con="fun">
            <fun>
              <arg value="Shell" con="var" />
            </fun>
            <params>
              <arg value="gascpath" con="var" />
              <arg value="--name" con="str" />
              <arg value="gca_name" con="mem">
                <arg value="this" con="var" />
              </arg>
              <arg value="--targetpath" con="str" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="gca_path" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                  <arg value="gaa_sourcepath" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                </params>
              </arg>
              <arg value="--version" con="str" />
              <arg value="gca_version" con="mem">
                <arg value="this" con="var" />
              </arg>
              <arg value="--id" con="str" />
              <arg value="gca_id" con="mem">
                <arg value="this" con="var" />
              </arg>
              <arg value="--code" con="str" />
              <arg value="codes" con="var" />
              <arg value="dep" con="var" />
              <arg value="deps" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:Record(&quot;[+] gaa库编译完成&quot;);">
          <arg con="fun">
            <fun>
              <arg value="Record" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="[+] gaa库编译完成" con="str" />
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="AddPlatform_Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="page" str="var page =  AddPlatformPage(&quot;添加平台&quot;);" />
        <getres_s str="var page =  AddPlatformPage(&quot;添加平台&quot;);">
          <arg value="page" con="var" />
          <arg con="fun">
            <fun>
              <arg value="AddPlatformPage" con="var" />
            </fun>
            <params>
              <arg value="添加平台" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="page:gca_path = this:gca_path;">
          <arg value="gca_path" con="mem">
            <arg value="page" con="var" />
          </arg>
          <arg value="gca_path" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="page:projectname = this:gca_name;">
          <arg value="projectname" con="mem">
            <arg value="page" con="var" />
          </arg>
          <arg value="gca_name" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="page:Refreshplatformlist = this:Refreshplatformlist;">
          <arg value="Refreshplatformlist" con="mem">
            <arg value="page" con="var" />
          </arg>
          <arg value="Refreshplatformlist" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="page:ls_dependences = this:ls_dependences;">
          <arg value="ls_dependences" con="mem">
            <arg value="page" con="var" />
          </arg>
          <arg value="ls_dependences" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <usefun_s str="PageGo(page);">
          <arg con="fun">
            <fun>
              <arg value="PageGo" con="var" />
            </fun>
            <params>
              <arg value="page" con="var" />
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="ConfigSave_Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="ls_config" str="var ls_config = this:ls_config;" />
        <getres_s str="var ls_config = this:ls_config;">
          <arg value="ls_config" con="var" />
          <arg value="ls_config" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="this:gca_version = ls_config(0):Detail;">
          <arg value="gca_version" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="Detail" con="mem">
            <arg con="fun">
              <fun>
                <arg value="ls_config" con="var" />
              </fun>
              <params>
                <arg value="0" con="num" />
              </params>
            </arg>
          </arg>
        </getres_s>
        <getres_s str="this:gca_id = ls_config(1):Detail;">
          <arg value="gca_id" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="Detail" con="mem">
            <arg con="fun">
              <fun>
                <arg value="ls_config" con="var" />
              </fun>
              <params>
                <arg value="1" con="num" />
              </params>
            </arg>
          </arg>
        </getres_s>
        <getres_s str="this:gca_writer = ls_config(2):Detail;">
          <arg value="gca_writer" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="Detail" con="mem">
            <arg con="fun">
              <fun>
                <arg value="ls_config" con="var" />
              </fun>
              <params>
                <arg value="2" con="num" />
              </params>
            </arg>
          </arg>
        </getres_s>
        <getres_s str="this:gca_helplink = ls_config(3):Detail;">
          <arg value="gca_helplink" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="Detail" con="mem">
            <arg con="fun">
              <fun>
                <arg value="ls_config" con="var" />
              </fun>
              <params>
                <arg value="3" con="num" />
              </params>
            </arg>
          </arg>
        </getres_s>
        <var_s varname="ele_xml" str="var ele_xml = sta_xml_gca:Content;" />
        <getres_s str="var ele_xml = sta_xml_gca:Content;">
          <arg value="ele_xml" con="var" />
          <arg value="Content" con="mem">
            <arg value="sta_xml_gca" con="var" />
          </arg>
        </getres_s>
        <usefun_s str="ele_xml:SetAttribute(&quot;version&quot;,this:gca_version);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="ele_xml" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="version" con="str" />
              <arg value="gca_version" con="mem">
                <arg value="this" con="var" />
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="ele_xml:SetAttribute(&quot;id&quot;,this:gca_id);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="ele_xml" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="id" con="str" />
              <arg value="gca_id" con="mem">
                <arg value="this" con="var" />
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="ele_xml:SetAttribute(&quot;writer&quot;,this:gca_writer);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="ele_xml" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="writer" con="str" />
              <arg value="gca_writer" con="mem">
                <arg value="this" con="var" />
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="ele_xml:SetAttribute(&quot;helplink&quot;,this:gca_helplink);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="ele_xml" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="helplink" con="str" />
              <arg value="gca_helplink" con="mem">
                <arg value="this" con="var" />
              </arg>
            </params>
          </arg>
        </usefun_s>
        <var_s varname="dep" str="var dep = ls_config(4):Detail;" />
        <getres_s str="var dep = ls_config(4):Detail;">
          <arg value="dep" con="var" />
          <arg value="Detail" con="mem">
            <arg con="fun">
              <fun>
                <arg value="ls_config" con="var" />
              </fun>
              <params>
                <arg value="4" con="num" />
              </params>
            </arg>
          </arg>
        </getres_s>
        <var_s varname="deps" str="var deps = dep:Split(&quot;;&quot;);" />
        <getres_s str="var deps = dep:Split(&quot;;&quot;);">
          <arg value="deps" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Split" con="mem">
                <arg value="dep" con="var" />
              </arg>
            </fun>
            <params>
              <arg value=";" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="ele_deps" str="var ele_deps = ele_xml:GetChild(4);" />
        <getres_s str="var ele_deps = ele_xml:GetChild(4);">
          <arg value="ele_deps" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GetChild" con="mem">
                <arg value="ele_xml" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="4" con="num" />
            </params>
          </arg>
        </getres_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i,Range(0,ele_deps:Count)):">
          <from>
            <arg con="fun">
              <fun>
                <arg value="Range" con="var" />
              </fun>
              <params>
                <arg value="0" con="num" />
                <arg value="Count" con="mem">
                  <arg value="ele_deps" con="var" />
                </arg>
              </params>
            </arg>
          </from>
          <run>
            <usefun_s str="ele_deps:RemoveChild(ele_deps:GetChild(0));">
              <arg con="fun">
                <fun>
                  <arg value="RemoveChild" con="mem">
                    <arg value="ele_deps" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="GetChild" con="mem">
                        <arg value="ele_deps" con="var" />
                      </arg>
                    </fun>
                    <params>
                      <arg value="0" con="num" />
                    </params>
                  </arg>
                </params>
              </arg>
            </usefun_s>
          </run>
        </foreach_s>
        <if_s str="if(dep:Replace(&quot; &quot;,&quot;&quot;) &amp;= &quot;&quot;):">
          <then>
            <express>
              <arg con="fun">
                <fun>
                  <arg value="StringIsEqual" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="Replace" con="mem">
                        <arg value="dep" con="var" />
                      </arg>
                    </fun>
                    <params>
                      <arg value=" " con="str" />
                      <arg value="" con="str" />
                    </params>
                  </arg>
                  <arg value="" con="str" />
                </params>
              </arg>
            </express>
            <run>
              <usefun_s str="this:SaveXml();">
                <arg con="fun">
                  <fun>
                    <arg value="SaveXml" con="mem">
                      <arg value="this" con="var" />
                    </arg>
                  </fun>
                  <params />
                </arg>
              </usefun_s>
              <return_s str="return(0);">
                <arg value="0" con="num" />
              </return_s>
            </run>
          </then>
        </if_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i,deps):">
          <from>
            <arg value="deps" con="var" />
          </from>
          <run>
            <var_s varname="xmlelement" str="var xmlelement = sta_xml_gca:CreatElement(&quot;dependence&quot;);" />
            <getres_s str="var xmlelement = sta_xml_gca:CreatElement(&quot;dependence&quot;);">
              <arg value="xmlelement" con="var" />
              <arg con="fun">
                <fun>
                  <arg value="CreatElement" con="mem">
                    <arg value="sta_xml_gca" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="dependence" con="str" />
                </params>
              </arg>
            </getres_s>
            <usefun_s str="xmlelement:SetAttribute(&quot;name&quot;,i);">
              <arg con="fun">
                <fun>
                  <arg value="SetAttribute" con="mem">
                    <arg value="xmlelement" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="name" con="str" />
                  <arg value="i" con="var" />
                </params>
              </arg>
            </usefun_s>
            <usefun_s str="ele_deps:AddChild(xmlelement);">
              <arg con="fun">
                <fun>
                  <arg value="AddChild" con="mem">
                    <arg value="ele_deps" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="xmlelement" con="var" />
                </params>
              </arg>
            </usefun_s>
          </run>
        </foreach_s>
        <usefun_s str="this:SaveXml();">
          <arg con="fun">
            <fun>
              <arg value="SaveXml" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="SaveXml" params="" isref="False" isstatic="False">
        <var_s varname="stream" str="var stream = FileOpen(this:gca_path&amp;this:gca_name&amp;&quot;.gca&quot;,&quot;creat&quot;);" />
        <getres_s str="var stream = FileOpen(this:gca_path&amp;this:gca_name&amp;&quot;.gca&quot;,&quot;creat&quot;);">
          <arg value="stream" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="gca_path" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                      <arg value="gca_name" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value=".gca" con="str" />
                </params>
              </arg>
              <arg value="creat" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="sta_xml_gca:Save(stream);">
          <arg con="fun">
            <fun>
              <arg value="Save" con="mem">
                <arg value="sta_xml_gca" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stream" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stream:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="Record" params="message" isref="False" isstatic="False">
        <getres_s str="this:et_output:Text = this:et_output:Text&amp;&quot;\r\n&quot;&amp;message;">
          <arg value="Text" con="mem">
            <arg value="et_output" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg con="fun">
            <fun>
              <arg value="StringAdd" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="Text" con="mem">
                    <arg value="et_output" con="mem">
                      <arg value="this" con="var" />
                    </arg>
                  </arg>
                  <arg value="&#xD;&#xA;" con="str" />
                </params>
              </arg>
              <arg value="message" con="var" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="this:sf_output:ScrollPosition = &quot;bottom&quot;;">
          <arg value="ScrollPosition" con="mem">
            <arg value="sf_output" con="mem">
              <arg value="this" con="var" />
            </arg>
          </arg>
          <arg value="bottom" con="str" />
        </getres_s>
      </memfun>
    </cls>
  </lib>
  <lib name="FreeStudio">
    <cls name="AddPlatformPage" parent="Page">
      <member value="gca_path" />
      <member value="projectname" />
      <member value="Refreshplatformlist" />
      <member value="ls_dependences" />
      <memfun funname="init" params="title" isref="False" isstatic="False">
        <var_s varname="grid" str="var grid = GridFlat(&quot;grid&quot;);" />
        <getres_s str="var grid = GridFlat(&quot;grid&quot;);">
          <arg value="grid" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GridFlat" con="var" />
            </fun>
            <params>
              <arg value="grid" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="grid:Horizontal = &quot;stretch&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="grid" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <getres_s str="grid:Vertical = &quot;stretch&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="grid" con="var" />
          </arg>
          <arg value="stretch" con="str" />
        </getres_s>
        <usefun_s str="grid:AddRow(1,&quot;rate&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddRow" con="mem">
                <arg value="grid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="rate" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid:AddRow(1,&quot;rate&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddRow" con="mem">
                <arg value="grid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="rate" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid:AddColumn(1,&quot;rate&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddColumn" con="mem">
                <arg value="grid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="rate" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid:AddColumn(1,&quot;rate&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddColumn" con="mem">
                <arg value="grid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="rate" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid:AddColumn(1,&quot;rate&quot;);">
          <arg con="fun">
            <fun>
              <arg value="AddColumn" con="mem">
                <arg value="grid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="1" con="num" />
              <arg value="rate" con="str" />
            </params>
          </arg>
        </usefun_s>
        <getres_s str="grid:Background = &quot;#323232&quot;;">
          <arg value="Background" con="mem">
            <arg value="grid" con="var" />
          </arg>
          <arg value="#323232" con="str" />
        </getres_s>
        <var_s varname="win_stack" str="var win_stack = StackFlat(&quot;ws&quot;);" />
        <getres_s str="var win_stack = StackFlat(&quot;ws&quot;);">
          <arg value="win_stack" con="var" />
          <arg con="fun">
            <fun>
              <arg value="StackFlat" con="var" />
            </fun>
            <params>
              <arg value="ws" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="win_stack :Horizontal = &quot;center&quot;;">
          <arg value="Horizontal" con="mem">
            <arg value="win_stack" con="var" />
          </arg>
          <arg value="center" con="str" />
        </getres_s>
        <getres_s str="win_stack:Vertical = &quot;center&quot;;">
          <arg value="Vertical" con="mem">
            <arg value="win_stack" con="var" />
          </arg>
          <arg value="center" con="str" />
        </getres_s>
        <var_s varname="windows_title" str="var windows_title = Tip(&quot;wt&quot;);" />
        <getres_s str="var windows_title = Tip(&quot;wt&quot;);">
          <arg value="windows_title" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="wt" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="windows_title:Text = &quot;Windows&quot;;">
          <arg value="Text" con="mem">
            <arg value="windows_title" con="var" />
          </arg>
          <arg value="Windows" con="str" />
        </getres_s>
        <getres_s str="windows_title:FontSize = 28;">
          <arg value="FontSize" con="mem">
            <arg value="windows_title" con="var" />
          </arg>
          <arg value="28" con="num" />
        </getres_s>
        <getres_s str="windows_title:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="windows_title" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <usefun_s str="win_stack:Add(windows_title);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="win_stack" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="windows_title" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="windows_inf" str="var windows_inf = Tip(&quot;wi&quot;);" />
        <getres_s str="var windows_inf = Tip(&quot;wi&quot;);">
          <arg value="windows_inf" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Tip" con="var" />
            </fun>
            <params>
              <arg value="wi" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="windows_inf:Text = &quot;x86;.Net host;WPF Framework&quot;;">
          <arg value="Text" con="mem">
            <arg value="windows_inf" con="var" />
          </arg>
          <arg value="x86;.Net host;WPF Framework" con="str" />
        </getres_s>
        <getres_s str="windows_inf:Margin = List(10,10,10,10);">
          <arg value="Margin" con="mem">
            <arg value="windows_inf" con="var" />
          </arg>
          <arg con="fun">
            <fun>
              <arg value="List" con="var" />
            </fun>
            <params>
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
              <arg value="10" con="num" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="windows_inf:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="windows_inf" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <usefun_s str="win_stack:Add(windows_inf);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="win_stack" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="windows_inf" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="windows_bu" str="var windows_bu = Bubble(&quot;wb&quot;);" />
        <getres_s str="var windows_bu = Bubble(&quot;wb&quot;);">
          <arg value="windows_bu" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Bubble" con="var" />
            </fun>
            <params>
              <arg value="wb" con="str" />
            </params>
          </arg>
        </getres_s>
        <getres_s str="windows_bu:Text = &quot;添加&quot;;">
          <arg value="Text" con="mem">
            <arg value="windows_bu" con="var" />
          </arg>
          <arg value="添加" con="str" />
        </getres_s>
        <getres_s str="windows_bu:FontSize = 16;">
          <arg value="FontSize" con="mem">
            <arg value="windows_bu" con="var" />
          </arg>
          <arg value="16" con="num" />
        </getres_s>
        <getres_s str="windows_bu:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="windows_bu" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="windows_bu:Clickevent = this:WindowsAddClick;">
          <arg value="Clickevent" con="mem">
            <arg value="windows_bu" con="var" />
          </arg>
          <arg value="WindowsAddClick" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <usefun_s str="win_stack:Add(windows_bu);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="win_stack" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="windows_bu" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="grid:Add(win_stack,0,0);">
          <arg con="fun">
            <fun>
              <arg value="Add" con="mem">
                <arg value="grid" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="win_stack" con="var" />
              <arg value="0" con="num" />
              <arg value="0" con="num" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="this:SetContent(grid);">
          <arg con="fun">
            <fun>
              <arg value="SetContent" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="grid" con="var" />
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="WindowsAddClick" params="p,e" isref="False" isstatic="False">
        <var_s varname="stream" str="var stream = FileOpen(this:gca_path&amp;this:projectname&amp;&quot;.gca&quot;,&quot;open&quot;);" />
        <getres_s str="var stream = FileOpen(this:gca_path&amp;this:projectname&amp;&quot;.gca&quot;,&quot;open&quot;);">
          <arg value="stream" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="gca_path" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                      <arg value="projectname" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value=".gca" con="str" />
                </params>
              </arg>
              <arg value="open" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="xmldoc" str="var xmldoc= XmlDocument();" />
        <getres_s str="var xmldoc= XmlDocument();">
          <arg value="xmldoc" con="var" />
          <arg con="fun">
            <fun>
              <arg value="XmlDocument" con="var" />
            </fun>
            <params />
          </arg>
        </getres_s>
        <usefun_s str="xmldoc:Load(stream);">
          <arg con="fun">
            <fun>
              <arg value="Load" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stream" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stream:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <var_s varname="ele_platforms" str="var ele_platforms = xmldoc:Content:GetChild(3);" />
        <getres_s str="var ele_platforms = xmldoc:Content:GetChild(3);">
          <arg value="ele_platforms" con="var" />
          <arg con="fun">
            <fun>
              <arg value="GetChild" con="mem">
                <arg value="Content" con="mem">
                  <arg value="xmldoc" con="var" />
                </arg>
              </arg>
            </fun>
            <params>
              <arg value="3" con="num" />
            </params>
          </arg>
        </getres_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i,Range(0,ele_platforms:Count)):">
          <from>
            <arg con="fun">
              <fun>
                <arg value="Range" con="var" />
              </fun>
              <params>
                <arg value="0" con="num" />
                <arg value="Count" con="mem">
                  <arg value="ele_platforms" con="var" />
                </arg>
              </params>
            </arg>
          </from>
          <run>
            <if_s str="if(ele_platforms:GetChild(i):GetAttribute(&quot;id&quot;) &amp;= &quot;GTWPF&quot;):">
              <then>
                <express>
                  <arg con="fun">
                    <fun>
                      <arg value="StringIsEqual" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="GetAttribute" con="mem">
                            <arg con="fun">
                              <fun>
                                <arg value="GetChild" con="mem">
                                  <arg value="ele_platforms" con="var" />
                                </arg>
                              </fun>
                              <params>
                                <arg value="i" con="var" />
                              </params>
                            </arg>
                          </arg>
                        </fun>
                        <params>
                          <arg value="id" con="str" />
                        </params>
                      </arg>
                      <arg value="GTWPF" con="str" />
                    </params>
                  </arg>
                </express>
                <run>
                  <usefun_s str="Message(&quot;已经添加过该平台&quot;);">
                    <arg con="fun">
                      <fun>
                        <arg value="Message" con="var" />
                      </fun>
                      <params>
                        <arg value="已经添加过该平台" con="str" />
                      </params>
                    </arg>
                  </usefun_s>
                  <return_s str="return(0);">
                    <arg value="0" con="num" />
                  </return_s>
                </run>
              </then>
            </if_s>
          </run>
        </foreach_s>
        <var_s varname="ele_platform" str="var ele_platform = xmldoc:CreatElement(&quot;platform&quot;);" />
        <getres_s str="var ele_platform = xmldoc:CreatElement(&quot;platform&quot;);">
          <arg value="ele_platform" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="platform" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="ele_platform:SetAttribute(&quot;id&quot;,&quot;GTWPF&quot;);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="ele_platform" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="id" con="str" />
              <arg value="GTWPF" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="ele_platform:SetAttribute(&quot;sourcepath&quot;,&quot;platform\\WPF\\&quot;&amp;this:projectname&amp;&quot;\\&quot;);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="ele_platform" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="sourcepath" con="str" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="platform\WPF\" con="str" />
                      <arg value="projectname" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value="\" con="str" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="ele_platform:SetAttribute(&quot;buildpath&quot;,&quot;platform\\WPF&quot;);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="ele_platform" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="buildpath" con="str" />
              <arg value="platform\WPF" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="ele_platforms:AddChild(ele_platform);">
          <arg con="fun">
            <fun>
              <arg value="AddChild" con="mem">
                <arg value="ele_platforms" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="ele_platform" con="var" />
            </params>
          </arg>
        </usefun_s>
        <getres_s str="stream = FileOpen(this:gca_path&amp;this:projectname&amp;&quot;.gca&quot;,&quot;creat&quot;);">
          <arg value="stream" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="gca_path" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                      <arg value="projectname" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value=".gca" con="str" />
                </params>
              </arg>
              <arg value="creat" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="xmldoc:Save(stream);">
          <arg con="fun">
            <fun>
              <arg value="Save" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stream" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stream:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <usefun_s str="this:Refreshplatformlist(xmldoc);">
          <arg con="fun">
            <fun>
              <arg value="Refreshplatformlist" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="xmldoc" con="var" />
            </params>
          </arg>
        </usefun_s>
        <var_s varname="deps" str="var deps = this:projectname;" />
        <getres_s str="var deps = this:projectname;">
          <arg value="deps" con="var" />
          <arg value="projectname" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i,this:ls_dependences):">
          <from>
            <arg value="ls_dependences" con="mem">
              <arg value="this" con="var" />
            </arg>
          </from>
          <run>
            <getres_s str="deps = deps&amp;&quot; &quot;&amp;i ;">
              <arg value="deps" con="var" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="deps" con="var" />
                      <arg value=" " con="str" />
                    </params>
                  </arg>
                  <arg value="i" con="var" />
                </params>
              </arg>
            </getres_s>
          </run>
        </foreach_s>
        <usefun_s str="Shell(&quot;tools\\wpfcreater\\wpfcreater.exe&quot;,&quot;--name&quot;,this:projectname,&quot;--path&quot;,this:gca_path&amp;&quot;platform\\WPF\\&quot;&amp;this:projectname,&quot;--lib&quot;,deps);">
          <arg con="fun">
            <fun>
              <arg value="Shell" con="var" />
            </fun>
            <params>
              <arg value="tools\wpfcreater\wpfcreater.exe" con="str" />
              <arg value="--name" con="str" />
              <arg value="projectname" con="mem">
                <arg value="this" con="var" />
              </arg>
              <arg value="--path" con="str" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="gca_path" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                      <arg value="platform\WPF\" con="str" />
                    </params>
                  </arg>
                  <arg value="projectname" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                </params>
              </arg>
              <arg value="--lib" con="str" />
              <arg value="deps" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="Record(&quot;[+] 成功添加 Windows 平台&quot;);">
          <arg con="fun">
            <fun>
              <arg value="Record" con="var" />
            </fun>
            <params>
              <arg value="[+] 成功添加 Windows 平台" con="str" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="PageReturn();">
          <arg con="fun">
            <fun>
              <arg value="PageReturn" con="var" />
            </fun>
            <params />
          </arg>
        </usefun_s>
      </memfun>
    </cls>
  </lib>
  <lib name="FreeStudio">
    <cls name="GTWPFBuilder" parent="">
      <member value="sourcepath" />
      <member value="buildpath" />
      <member value="projectname" />
      <member value="ls_dependences" />
      <member value="gca_path" />
      <member value="gaapath" />
      <member value="libbuildclick" />
      <memfun funname="init" params="sourcepath,buildpath,projectname,ls_dependences,gca_path,gaapath,libbuildclick" isref="False" isstatic="False">
        <getres_s str="this:sourcepath = sourcepath;">
          <arg value="sourcepath" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="sourcepath" con="var" />
        </getres_s>
        <getres_s str="this:buildpath = buildpath;">
          <arg value="buildpath" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="buildpath" con="var" />
        </getres_s>
        <getres_s str="this:projectname = projectname;">
          <arg value="projectname" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="projectname" con="var" />
        </getres_s>
        <getres_s str="this:ls_dependences = ls_dependences;">
          <arg value="ls_dependences" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="ls_dependences" con="var" />
        </getres_s>
        <getres_s str="this:gca_path =gca_path;">
          <arg value="gca_path" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="gca_path" con="var" />
        </getres_s>
        <getres_s str="this:gaapath = gaapath;">
          <arg value="gaapath" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="gaapath" con="var" />
        </getres_s>
        <getres_s str="this:libbuildclick = libbuildclick;">
          <arg value="libbuildclick" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="libbuildclick" con="var" />
        </getres_s>
      </memfun>
      <memfun funname="Build" params="p,e" isref="False" isstatic="False">
        <usefun_s str="this:libbuildclick(p,e);">
          <arg con="fun">
            <fun>
              <arg value="libbuildclick" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="p" con="var" />
              <arg value="e" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="CreatDirectory(this:gca_path&amp;this:sourcepath);">
          <arg con="fun">
            <fun>
              <arg value="CreatDirectory" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="gca_path" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                  <arg value="sourcepath" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="FileCopy(this:gca_path&amp;this:gaapath&amp;&quot;\\&quot;&amp;this:projectname&amp;&quot;.gaa&quot;,this:gca_path&amp;this:sourcepath&amp;this:projectname&amp;&quot;.gaa&quot;);">
          <arg con="fun">
            <fun>
              <arg value="FileCopy" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg con="fun">
                            <fun>
                              <arg value="StringAdd" con="var" />
                            </fun>
                            <params>
                              <arg value="gca_path" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                              <arg value="gaapath" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                            </params>
                          </arg>
                          <arg value="\" con="str" />
                        </params>
                      </arg>
                      <arg value="projectname" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value=".gaa" con="str" />
                </params>
              </arg>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg value="gca_path" con="mem">
                            <arg value="this" con="var" />
                          </arg>
                          <arg value="sourcepath" con="mem">
                            <arg value="this" con="var" />
                          </arg>
                        </params>
                      </arg>
                      <arg value="projectname" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value=".gaa" con="str" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i , this:ls_dependences):">
          <from>
            <arg value="ls_dependences" con="mem">
              <arg value="this" con="var" />
            </arg>
          </from>
          <run>
            <usefun_s str="FileCopy(this:gca_path&amp;this:gaapath&amp;&quot;\\&quot;&amp;i&amp;&quot;.gaa&quot;,this:gca_path&amp;this:sourcepath&amp;i&amp;&quot;.gaa&quot;);">
              <arg con="fun">
                <fun>
                  <arg value="FileCopy" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg con="fun">
                            <fun>
                              <arg value="StringAdd" con="var" />
                            </fun>
                            <params>
                              <arg con="fun">
                                <fun>
                                  <arg value="StringAdd" con="var" />
                                </fun>
                                <params>
                                  <arg value="gca_path" con="mem">
                                    <arg value="this" con="var" />
                                  </arg>
                                  <arg value="gaapath" con="mem">
                                    <arg value="this" con="var" />
                                  </arg>
                                </params>
                              </arg>
                              <arg value="\" con="str" />
                            </params>
                          </arg>
                          <arg value="i" con="var" />
                        </params>
                      </arg>
                      <arg value=".gaa" con="str" />
                    </params>
                  </arg>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg con="fun">
                            <fun>
                              <arg value="StringAdd" con="var" />
                            </fun>
                            <params>
                              <arg value="gca_path" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                              <arg value="sourcepath" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                            </params>
                          </arg>
                          <arg value="i" con="var" />
                        </params>
                      </arg>
                      <arg value=".gaa" con="str" />
                    </params>
                  </arg>
                </params>
              </arg>
            </usefun_s>
          </run>
        </foreach_s>
        <usefun_s str="this:UpdateDeps();">
          <arg con="fun">
            <fun>
              <arg value="UpdateDeps" con="mem">
                <arg value="this" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <usefun_s str="Shell(&quot;dotnet&quot;,&quot;publish&quot;,this:gca_path&amp;this:sourcepath&amp;this:projectname&amp;&quot;.csproj&quot;,&quot;--self-contained true --runtime win-x86 -p:PublishSingleFile=true --output&quot;,this:gca_path&amp;this:buildpath);">
          <arg con="fun">
            <fun>
              <arg value="Shell" con="var" />
            </fun>
            <params>
              <arg value="dotnet" con="str" />
              <arg value="publish" con="str" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg value="gca_path" con="mem">
                            <arg value="this" con="var" />
                          </arg>
                          <arg value="sourcepath" con="mem">
                            <arg value="this" con="var" />
                          </arg>
                        </params>
                      </arg>
                      <arg value="projectname" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value=".csproj" con="str" />
                </params>
              </arg>
              <arg value="--self-contained true --runtime win-x86 -p:PublishSingleFile=true --output" con="str" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="gca_path" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                  <arg value="buildpath" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="Shell(this:gca_path&amp;this:buildpath&amp;&quot;\\&quot;&amp;this:projectname&amp;&quot;.exe&quot;);">
          <arg con="fun">
            <fun>
              <arg value="Shell" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg con="fun">
                            <fun>
                              <arg value="StringAdd" con="var" />
                            </fun>
                            <params>
                              <arg value="gca_path" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                              <arg value="buildpath" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                            </params>
                          </arg>
                          <arg value="\" con="str" />
                        </params>
                      </arg>
                      <arg value="projectname" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value=".exe" con="str" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
      </memfun>
      <memfun funname="UpdateDeps" params="" isref="False" isstatic="False">
        <var_s varname="stream" str="var stream = FileOpen(this:gca_path&amp;this:sourcepath&amp;&quot;\\&quot;&amp;this:projectname&amp;&quot;.csproj&quot;,&quot;open&quot;);" />
        <getres_s str="var stream = FileOpen(this:gca_path&amp;this:sourcepath&amp;&quot;\\&quot;&amp;this:projectname&amp;&quot;.csproj&quot;,&quot;open&quot;);">
          <arg value="stream" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg con="fun">
                            <fun>
                              <arg value="StringAdd" con="var" />
                            </fun>
                            <params>
                              <arg value="gca_path" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                              <arg value="sourcepath" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                            </params>
                          </arg>
                          <arg value="\" con="str" />
                        </params>
                      </arg>
                      <arg value="projectname" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value=".csproj" con="str" />
                </params>
              </arg>
              <arg value="open" con="str" />
            </params>
          </arg>
        </getres_s>
        <var_s varname="xmldoc" str="var xmldoc = XmlDocument();" />
        <getres_s str="var xmldoc = XmlDocument();">
          <arg value="xmldoc" con="var" />
          <arg con="fun">
            <fun>
              <arg value="XmlDocument" con="var" />
            </fun>
            <params />
          </arg>
        </getres_s>
        <usefun_s str="xmldoc:Load(stream);">
          <arg con="fun">
            <fun>
              <arg value="Load" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stream" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stream:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
        <var_s varname="xmlele" str="var xmlele = xmldoc:Content;" />
        <getres_s str="var xmlele = xmldoc:Content;">
          <arg value="xmlele" con="var" />
          <arg value="Content" con="mem">
            <arg value="xmldoc" con="var" />
          </arg>
        </getres_s>
        <usefun_s str="xmlele:RemoveChild(xmlele:GetChild(3));">
          <arg con="fun">
            <fun>
              <arg value="RemoveChild" con="mem">
                <arg value="xmlele" con="var" />
              </arg>
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="GetChild" con="mem">
                    <arg value="xmlele" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="3" con="num" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <var_s varname="newele" str="var newele = xmldoc:CreatElement(&quot;ItemGroup&quot;);" />
        <getres_s str="var newele = xmldoc:CreatElement(&quot;ItemGroup&quot;);">
          <arg value="newele" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="ItemGroup" con="str" />
            </params>
          </arg>
        </getres_s>
        <foreach_s var_togive="i" var_new="True" str="foreach(var i,this:ls_dependences):">
          <from>
            <arg value="ls_dependences" con="mem">
              <arg value="this" con="var" />
            </arg>
          </from>
          <run>
            <var_s varname="res" str="var res = xmldoc:CreatElement(&quot;Resource&quot;);" />
            <getres_s str="var res = xmldoc:CreatElement(&quot;Resource&quot;);">
              <arg value="res" con="var" />
              <arg con="fun">
                <fun>
                  <arg value="CreatElement" con="mem">
                    <arg value="xmldoc" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="Resource" con="str" />
                </params>
              </arg>
            </getres_s>
            <usefun_s str="res:SetAttribute(&quot;Include&quot;,i&amp;&quot;.gaa&quot;);">
              <arg con="fun">
                <fun>
                  <arg value="SetAttribute" con="mem">
                    <arg value="res" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="Include" con="str" />
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg value="i" con="var" />
                      <arg value=".gaa" con="str" />
                    </params>
                  </arg>
                </params>
              </arg>
            </usefun_s>
            <usefun_s str="newele:AddChild(res);">
              <arg con="fun">
                <fun>
                  <arg value="AddChild" con="mem">
                    <arg value="newele" con="var" />
                  </arg>
                </fun>
                <params>
                  <arg value="res" con="var" />
                </params>
              </arg>
            </usefun_s>
          </run>
        </foreach_s>
        <var_s varname="res" str="var res = xmldoc:CreatElement(&quot;Resource&quot;);" />
        <getres_s str="var res = xmldoc:CreatElement(&quot;Resource&quot;);">
          <arg value="res" con="var" />
          <arg con="fun">
            <fun>
              <arg value="CreatElement" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="Resource" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="res:SetAttribute(&quot;Include&quot;,this:projectname&amp;&quot;.gaa&quot;);">
          <arg con="fun">
            <fun>
              <arg value="SetAttribute" con="mem">
                <arg value="res" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="Include" con="str" />
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg value="projectname" con="mem">
                    <arg value="this" con="var" />
                  </arg>
                  <arg value=".gaa" con="str" />
                </params>
              </arg>
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="newele:AddChild(res);">
          <arg con="fun">
            <fun>
              <arg value="AddChild" con="mem">
                <arg value="newele" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="res" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="xmlele:AddChild(newele);">
          <arg con="fun">
            <fun>
              <arg value="AddChild" con="mem">
                <arg value="xmlele" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="newele" con="var" />
            </params>
          </arg>
        </usefun_s>
        <getres_s str="stream = FileOpen(this:gca_path&amp;this:sourcepath&amp;&quot;\\&quot;&amp;this:projectname&amp;&quot;.csproj&quot;,&quot;creat&quot;);">
          <arg value="stream" con="var" />
          <arg con="fun">
            <fun>
              <arg value="FileOpen" con="var" />
            </fun>
            <params>
              <arg con="fun">
                <fun>
                  <arg value="StringAdd" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringAdd" con="var" />
                    </fun>
                    <params>
                      <arg con="fun">
                        <fun>
                          <arg value="StringAdd" con="var" />
                        </fun>
                        <params>
                          <arg con="fun">
                            <fun>
                              <arg value="StringAdd" con="var" />
                            </fun>
                            <params>
                              <arg value="gca_path" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                              <arg value="sourcepath" con="mem">
                                <arg value="this" con="var" />
                              </arg>
                            </params>
                          </arg>
                          <arg value="\" con="str" />
                        </params>
                      </arg>
                      <arg value="projectname" con="mem">
                        <arg value="this" con="var" />
                      </arg>
                    </params>
                  </arg>
                  <arg value=".csproj" con="str" />
                </params>
              </arg>
              <arg value="creat" con="str" />
            </params>
          </arg>
        </getres_s>
        <usefun_s str="xmldoc:Save(stream);">
          <arg con="fun">
            <fun>
              <arg value="Save" con="mem">
                <arg value="xmldoc" con="var" />
              </arg>
            </fun>
            <params>
              <arg value="stream" con="var" />
            </params>
          </arg>
        </usefun_s>
        <usefun_s str="stream:Close();">
          <arg con="fun">
            <fun>
              <arg value="Close" con="mem">
                <arg value="stream" con="var" />
              </arg>
            </fun>
            <params />
          </arg>
        </usefun_s>
      </memfun>
    </cls>
  </lib>
  <lib name="FreeStudio">
    <cls name="ConfigCell" parent="TextCell">
      <memfun funname="init" params="name" isref="False" isstatic="False">
        <getres_s str="this:Clickevent = this:Click;">
          <arg value="Clickevent" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="Click" con="mem">
            <arg value="this" con="var" />
          </arg>
        </getres_s>
        <getres_s str="this:Foreground = &quot;white&quot;;">
          <arg value="Foreground" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
        <getres_s str="this:DetailColor = &quot;white&quot;;">
          <arg value="DetailColor" con="mem">
            <arg value="this" con="var" />
          </arg>
          <arg value="white" con="str" />
        </getres_s>
      </memfun>
      <memfun funname="Click" params="p,e" isref="False" isstatic="False">
        <var_s varname="res" str="var res = Input(&quot;修改属性&quot;,this:Text);" />
        <getres_s str="var res = Input(&quot;修改属性&quot;,this:Text);">
          <arg value="res" con="var" />
          <arg con="fun">
            <fun>
              <arg value="Input" con="var" />
            </fun>
            <params>
              <arg value="修改属性" con="str" />
              <arg value="Text" con="mem">
                <arg value="this" con="var" />
              </arg>
            </params>
          </arg>
        </getres_s>
        <if_s str="if(!(res &amp;= &quot;&quot;)):">
          <then>
            <express>
              <arg con="fun">
                <fun>
                  <arg value="Not" con="var" />
                </fun>
                <params>
                  <arg con="fun">
                    <fun>
                      <arg value="StringIsEqual" con="var" />
                    </fun>
                    <params>
                      <arg value="res" con="var" />
                      <arg value="" con="str" />
                    </params>
                  </arg>
                </params>
              </arg>
            </express>
            <run>
              <getres_s str="this:Detail = res;">
                <arg value="Detail" con="mem">
                  <arg value="this" con="var" />
                </arg>
                <arg value="res" con="var" />
              </getres_s>
            </run>
          </then>
        </if_s>
      </memfun>
    </cls>
  </lib>
</code>